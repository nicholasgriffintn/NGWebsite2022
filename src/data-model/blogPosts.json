[
  {
    "id": "319fb0b6-ca72-4d66-bc0f-9895713f3ebd",
    "content": "So quite some time now, I've been figuring out which is better, Gatsby JS or NextJS.\n\nIn reality, the answer is really that they are both fantastic solutions for different purposes, Gatsby can be better in some circumstances, however, NextJS is definitely more expansive of a solution and can be used for a range of different purposes.\n\nRecently, NextJS was expanded with some more capabilities that made it a pretty decent solution for static sites as well, thanks to a couple of APIs, [getStaticPaths and getStaticProps](https://nextjs.org/docs/basic-features/data-fetching).\n\nBoth of these combined the the `next export` command allows you to build pretty fantastic static websites, however, if you use them, you may find a similar issue to what I have.\n\nThe problem that I found was that although both of these APIs work great, on export, Next will output the files with uri encoded names, and not within a set of folders.\n\nWhile this may not seem like much of an issue, when it comes to S3 static websites, it's much better to have a directory-based structure.\n\nSo for my use case, I needed a script that will create folders for each of the URL params in order and then store the actual html file, within the created folder as index.html.\n\nThis will allow us to easily integrate with S3 Static Websites as S3 will load the index.html file according to the URL path by default, without this, and with the default NextJS exported files, your URLs will need to end with .html and have the encoded values within them, which isn't great.\n\nAnyway, long story short here's the script that I created:\n\n<script src=\"https://gist.github.com/nicholasgriffintn/d08f6dd048738db028e12321d1974e38.js\"></script>",
    "createdAt": "2020-08-16T14:48:27+0000",
    "createdAt#updatedAt": "2020-08-16T14:48:27+0000#2020-08-16T14:48:27+0000",
    "ctime": null,
    "description": "After using NextJS for a static site and deploying it to S3 I noticed a few issues, this post talks about my experience with that.",
    "header": "https://cdn.nicholasgriffin.dev/nextjs.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"AWS, S3, static website, NextJS\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/nextjs.png",
    "title": "Deploying a NextJS static site to S3",
    "updatedAt": "2020-08-16T14:48:27+0000"
  },
  {
    "id": "60f28d88-6255-4f5d-82d4-c56a8bf22d45",
    "content": "Alongside the [launch of my new website](/blog/project-ng-2020-re-launching-my-personal-website) with Next JS, Nginx, Postgres, and Express, I want to expand my site with more things.\n\nTo start, I need to get Authentication set up on the site so that we can lock off certain areas of the site, alongside any of the APIs that I don't want to be public.\n\nThere are a number of ways that I could do this, and in the past, [I have done this with a database and Passport.js on an Express server](https://nicholasgriffin.dev/post-single/5c7c00ffa1e5fbe51cd94951), this time, we're doing it with a much cooler service AWS Cognito.\n\n## What is AWS Cognito\n\nIn case you don't already know, AWS Cognito is an awesome add-on service from Amazon that makes it really simple to add sign-up, sign-in and access control across multiple apps, with the same system.\n\nA few of the biggest reasons to use this over a custom service is not only that it means you move the responsibility of maintaining your auth service to AWS but also that it allows you to scale your application across many different platforms and add features like social sign-on and SAML authentication, without too much effort.\n\nIn my case, it's going to allow me to add authentication to my website, possibly a mobile app and even to microservices outside of my site, such as Lambda.\n\nYou can [find out more about the service here](https://aws.amazon.com/cognito/).\n\n## Setting up our project\n\nThere are two main NPM pages that you can use with a React app, AWS Amplify and Amazon Cognito Identity JS, for me, I'm going to be using [Amazon Cognito Identity JS](https://www.npmjs.com/package/amazon-cognito-identity-js) as AWS Amplify provides a little more than I require for my use cases.\n\nInstalling that package is as simple as running the following:\n\n`npm i amazon-cognito-identity-js`\n\nOnce that's installed, you'll just need to import it with the following:\n\n```javascript\nimport {\n  CognitoUserPool,\n  AuthenticationDetails,\n  CognitoUser,\n} from 'amazon-cognito-identity-js';\n```\n\nNext up, you'll need to setup that package with your AWS Cognito credentials like the following:\n\n```javascript\nconst userPool = new CognitoUserPool({\n  UserPoolId: config.AUTH.UserPoolId,\n  ClientId: config.AUTH.ClientId,\n});\n```\n\nI'm using my config file here, but you could do it any way that you'd like to. It doesn't have to remain particularly secret as these details are revealed in requests.\n\n## Creating authentication components\n\nAs we'll be using AWS Cognito in various places across our site, I'm going to create a couple of components for talking to Cognito.\n\nThe first of these is the checkIfLogged in component, which as the name suggests, will use the AWS Cognito package to check if the user is logged in our not.\n\n```javascript\nimport { CognitoUserPool } from 'amazon-cognito-identity-js';\nimport { config } from '../config/config';\n\nexport default () => {\n  const userPool = new CognitoUserPool({\n    UserPoolId: config.AUTH.UserPoolId,\n    ClientId: config.AUTH.ClientId,\n  });\n\n  const cognitoUser = userPool.getCurrentUser();\n\n  if (cognitoUser && cognitoUser !== null) {\n    return cognitoUser.getSession((err, res) => {\n      if (err) {\n        console.error('error with authentication: ', err);\n        throw err;\n      }\n      if (res && res.isValid()) {\n        return { user: res, loggedIn: res.isValid() };\n      } else {\n        return { user: res, loggedIn: false };\n      }\n    });\n  } else {\n    return { user: {}, loggedIn: false };\n  }\n};\n```\n\nBasically, that will just grab the session from Cognito and then return it with a JSON response.\n\nWe'll import this component on our packages to check if the user is logged in and to grab the user's details from Cognito, without having to re-write code.\n\n## Creating our login page\n\nObviously, the first step of any authentication is to create a login page.\n\nFor my site, the login page is going to be pretty simple, but I presume this will grow further as I build more stuff, for now, it's going to be pretty basic as it's just me logging in anyway.\n\nTo start, I'm going to set the state for the username and password that we're going to us in our form:\n\n```javascript\nconstructor(props) {\n    super(props);\n    this.state = {\n      email: \"\",\n      password: \"\",\n    };\n  }\n```\n\nIf the user is already logged in, we want to redirect the user to our dashboard page to make things easy:\n\n```javascript\ncomponentDidMount() {\n    const { loggedIn } = checkLoggedIn();\n    if (loggedIn) {\n      redirect({}, \"/dashboard\");\n    }\n  }\n```\n\nNext, we need some base functions for the login form functionality:\n\n```javascript\n  handleEmailChange(e) {\n    this.setState({ email: e.target.value });\n  }\n\n  handlePasswordChange(e) {\n    this.setState({ password: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const email = this.state.email.trim();\n    const password = this.state.password.trim();\n    const authenticationData = {\n      Email: email,\n      Password: password,\n    };\n    const authenticationDetails = new AuthenticationDetails(authenticationData);\n    const userData = {\n      Username: email,\n      Pool: userPool,\n    };\n    const cognitoUser = new CognitoUser(userData);\n    cognitoUser.authenticateUser(authenticationDetails, {\n      onSuccess: function (result) {\n        redirect({}, \"/dashboard\");\n      },\n\n      onFailure: function (err) {\n        console.log(\"error \", err);\n      },\n\n      mfaRequired: function (codeDeliveryDetails) {\n        var verificationCode = prompt(\"Please input verification code\", \"\");\n        cognitoUser.sendMFACode(verificationCode, this);\n      },\n\n      newPasswordRequired: function (userAttributes, requiredAttributes) {\n        var newPassword = prompt(\"Please input a new password\", \"\");\n\n        delete userAttributes.email_verified;\n        delete userAttributes.phone_number_verified;\n\n        cognitoUser.completeNewPasswordChallenge(\n          newPassword,\n          userAttributes,\n          this\n        );\n      },\n    });\n  }\n```\n\nAgain, pretty simplistic, the handleChange functions will just take the input value and set the state with that value.\n\nThe handleSubmit function will use the AWS Cognito package to check if the user exists and find the next step by sending the username and password input to AWS. AWS will respond with either an error, success or the next step.\n\nonSuccess is for the success response, onFailure is for the failures, mfaRequired is for if the user has set up two-factor authentication and newPassRequired is if the user is required to set their password on login, this happens when the user first logs in or if they have been reset by an admin.\n\nThen we just need to add a form to our page:\n\n```javascript\nrender() {\n    return (\n      <Page displayHeader={true} title=\"Login\">\n        <div className=\"content-wrap\">\n          <div className=\"container-main\">\n            <div className=\"page-header-spacer\"></div>\n\n            <h1 id=\"single-title\" className=\"animated bounceInDown\">\n              Sign in to the dashboard\n            </h1>\n            <form onSubmit={this.handleSubmit.bind(this)}>\n              <div className=\"form-control\">\n                <input\n                  type=\"text\"\n                  value={this.state.email}\n                  placeholder=\"Email\"\n                  onChange={this.handleEmailChange.bind(this)}\n                />\n              </div>\n              <div className=\"form-control\">\n                <input\n                  type=\"password\"\n                  value={this.state.password}\n                  placeholder=\"Password\"\n                  onChange={this.handlePasswordChange.bind(this)}\n                />\n              </div>\n              <div className=\"form-control\">\n                <input type=\"submit\" />\n              </div>\n            </form>\n          </div>\n        </div>\n      </Page>\n    );\n  }\n```\n\nSuper simple.\n\nHere's what the finished product looks like:\n\n<Image\n  alt=\"NG Login\"\n  src=\"https://cdn.nicholasgriffin.dev/ng-2020-login.png\"\n  width=\"2590\"\n  height=\"1376\"\n  layout=\"responsive\"\n  quality={80}\n  placeholder=\"blur\"\n  blurDataURL={`/_next/image?url=https://cdn.nicholasgriffin.dev/ng-2020-login.png&w=16&q=1`}\n/>\n\nThis will obviously need some expansion with error messages and not using prompts for our responses, but I'll do that in the background.\n\n## Creating a dashboard\n\nFor our dashboard page, we're going to keep with the theme of keeping our site super simple, the basis of this is a bit of code that will redirect the user to the login page if they haven't logged in, reusing the same component that we made earlier:\n\nIt then sets the state for the user details so we can use that later.\n\n```javascript\n  componentDidMount() {\n    const { user, loggedIn } = checkLoggedIn();\n    if (!loggedIn) {\n      redirect({}, \"/login\");\n    } else if (user) {\n      this.setState({ user: user });\n    } else {\n      redirect({}, \"/login\");\n    }\n  }\n```\n\nWe can then grab those user details with a bit of code like the following:\n\n```html\n<p>\n  <strong>User Data:</strong>\n</p>\n<p>Sub: {this.state.user.idToken.payload.sub}</p>\n<p>Email: {this.state.user.idToken.payload.email}</p>\n<p>\n  <strong>Token:</strong>\n</p>\n<pre>{this.state.user.idToken.jwtToken}</pre>\n```\n\n## Adding authentication to our API\n\nOn the Express side of this, we need a couple of packages, which can be imported like the following:\n\n```javascript\nconst bearerToken = require('express-bearer-token');\nconst CognitoExpress = require('cognito-express');\n```\n\nbearerToken will allow us to grab the bearer token from the request, and cognitoExpress is our link to AWS Cognito from our Express API.\n\nWe use this like the following to validate the requests bearer token.\n\nYou set it up like so:\n\n```javascript\nconst cognitoExpress = new CognitoExpress({\n  region: 'eu-west-2',\n  cognitoUserPoolId: config.AUTH.UserPoolId,\n  tokenUse: 'id',\n});\n```\n\nAnd then use if like so:\n\n```javascript\nserver.post(`/api/content`, async function (req, res) {\n  if (req.token) {\n    cognitoExpress.validate(req.token, async function (err, response) {\n      if (err || !response) {\n        res.status(403).json({ error: 'Token invalid' });\n      } else {\n        res.status(200).json({ response });\n      }\n    });\n  } else {\n    res.status(403).json({ error: 'Token invalid' });\n  }\n});\n```\n\n## And that's about it\n\nFor now, this should be good enough for securing our pages and APIs, keeping the bad guys out.\n\n![Making sure the bad guys have the wrong tools](https://media.giphy.com/media/iHFxYPZCssF20/giphy.gif)\n",
    "createdAt": "2020-04-19T14:48:27+0000",
    "createdAt#updatedAt": "2020-04-19T14:48:27+0000#2020-04-19T14:48:27+0000",
    "ctime": null,
    "description": "Easy website authentication ready for the future",
    "header": "https://cdn.nicholasgriffin.dev/Screenshot+2020-04-19+at+00.09.00.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"Meta, AWS, AWS Cognito\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/ng-2020-authentication.png",
    "title": "Project NG 2020: Securing my website with AWS Cognito",
    "updatedAt": "2020-04-19T14:48:27+0000"
  },
  {
    "id": "b315023e-8a89-4e7e-95d1-9d61a6e41ea1",
    "content": "\nLast weekend marked the beginning of Amazon's new virtual DeepRacer league, which is basically a race that is conducted within Amazon's platform by a bunch of simulated versions of the  DeepRacer vehicle.\n\nDevelopers battle it out in this league not by their driving skill but by their knowledge of the AWS platform and their ability to effectively create and train a DeepRacer model on AWS' platform.  As you can tell by the title, this was immediately something that I thought I would be interested in, if not at least just for the weekend and I'd have to say that I definitely had fun doing it.\n\n## Getting Started\n\nThe whole process of getting started with AWS DeepRacer and concept of Reinforcement Learning is a slightly scary one at first sight, this is something that you've probably never done before and at times, Amazon's slightly jarring interface can be a little confusing.\n\nThankfully, it isn't actually that hard to do. Simply head on over to the [AWS DeepRacer](https://console.aws.amazon.com/deepracer/) page in your console and hit the orange 'Get Started' button,  that will take you to another page where you need to click another button in order to create the resources required.\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+12.28.57.png)\n\nThere's also a link to a document about learning RL on this page that you should definitely check out.\n\nOnce you've done all that, you are ready to start making some models and get spending some money and yes, you will have to spend a bit of money, DeepRacer is definitely not for the light of wallet, more on that later.\n\n## Creating a DeepRacer model\n\nSo probably the hardest part of this journey with DeepRacer was the creation of RL models for use with the simulation, while the actual creation  of the models simply  involves some Python code that you can create in pretty much any IDE, getting a model correct can be a lot of trial and error and a lot of the time,  you will  end up with an error.\n\nSadly, a lot of your success will also be linked to the training settings that you select for your DeepRacer model and while you can do  a lot with your own code, sometimes you might end up having to scrap all of the training that you have conducted in order to slightly change a  setting with a value that is more than likely  to be an utter  guess.\n\nThen you'll likely have to do at least an hour or two of training before you can get racing.\n\nThat said, I  can't say that I  didn't find the experience enjoyable, nor that I didn't learn anything from, nor that I didn't have any fun. \n\n![](https://cdn.nicholasgriffin.dev/images/aawsdeeprace.gif)\n\nAs  you can see from the GIF above, there are a lot of options, but it actually isn't that hard to get one going fast.\n\nIn total, I created 19 models over the weekend, and each one gradually started to get a little better, somewhat smarter and a lot faster.\n\nAt the start, I decided to use one of Amazon's templates to see how everything worked and to get a quick glimpse into what I could expect, so i used the following function, which is designed to train to car to keep within the two borders and hopefully on the center linne.\n\n```python\n    def reward_function(params):     \n    '''     \n    Example of rewarding the agent to follow center line     \n    '''          \n    # Read input parameters     \n    track_width = params['track_width']     \n    distance_from_center = params['distance_from_center']          \n    # Calculate 3 markers that are at varying distances away from the center line     \n    marker_1 = 0.1 * track_width     \n    marker_2 = 0.25 * track_width     \n    marker_3 = 0.5 * track_width          \n    # Give higher reward if the car is closer to center line and vice versa     \n    if distance_from_center <= marker_1:\n    reward = 1.0     \n    elif distance_from_center <= marker_2:\n    reward = 0.5     \n    elif distance_from_center <= marker_3:\n    reward = 0.1     \n    else:         \n    reward = 1e-3  # likely crashed/ close to off track          \n    return float(reward)\n```\n\nAs you can see it is actually quite simple but involves quite a lot of math. The premise is that the more that your car does what you want it to, the more reward value you provide. if it does something that you don't want itt to, you take the reward away.\n\nSo in this example, the car will get the highest reward if it is closer to the center line.\n\nFor this first one, I did only that and then used the default settings.\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+13.04.21.png)\n\nThe great thing about DeepRacer is that you can actually watch a live stream of your model training in the simulation while it is doing so. This means that you can quickly see where you could make optimisations to your model and what optimisations you should probably tone down.\n\nShould your model look like it's not panning out, you can also quickly stoop the training and save some money.\n\nOnce my model had finished, I worked out that although it was occasionally steering to the center for those points, it was not staying there for a long period of time and even sometimes going off the track.\n\nThankfully, Amazon has already set up a range of parameters that will allow you to customise your reward function  and get the most out of it.\n\n```python\n    {     \n        \"all_wheels_on_track\": Boolean,    \n        # flag to indicate if the vehicle is on the track     \n        \"x\": float,                        \n        # vehicle's x-coordinate in meters     \n        \"y\": float,                        \n        # vehicle's y-coordinate in meters     \n        \"distance_from_center\": float,     \n        # distance in meters from the track center      \n        \"is_left_of_center\": Boolean,      \n        # Flag to indicate if the vehicle is on the left side to the track center or not.      \n        \"heading\": float,                  \n        # vehicle's yaw in degrees     \n        \"progress\": float,                 \n        # percentage of track completed     \n        \"steps\": int,                      \n        # number steps completed     \n        \"speed\": float,                    \n        # vehicle's speed in meters per second (m/s)     \n        \"steering_angle\": float,          \n        # vehicle's steering angle in degrees     \n        \"track_width\": float,              \n        # width of the track     \n        \"waypoints\": [[float, float], … ], \n        # list of [x,y] as milestones along the track center     \n        \"closest_waypoints\": [int, int]    \n        # indices of the two nearest waypoints. \n    }\n```\n\nSo what I did was combine the default with a multiplier for the car's progress while being in the center of the track.\n\n```python\n     Give higher reward if the car is closer to center line and vice versa     \n     if distance_from_center <= marker_1:         \n        reward = 1.0 * progress     \n     elif distance_from_center <= marker_2:         \n        reward = 0.5     \n    elif distance_from_center <= marker_3:         \n        reward = 0.1     \n    else:         \n        reward = 1e-3  # likely crashed/ close to off track\n```\n\nI also wanted it to go faster, while not steering to much so I added the following:\n\n```python\n        # Add penalty if throttle exsides the steering else add reward     \n        if abs(steering_angle) > 15 and abs(steering_angle > throttle):         \n            reward *= 1 - (steering_angle - throttle)     \n        else:         \n            reward *= 1 + throttle\n```\n\nAnd then I had to increase the speed on the action parameters as well, this is the part where you have more risk in changing your parameters, as you can't change the parameters on a cloned model, only a new one and once you create a new model, you lose all of your progress and training, but keeping the defaults will definitely mean that you will not be able to progress through the league as much.\n\nYou can also play around with the HyperParameters to optimise your training, however, this is again a bit of trail and error.\n\nFor me, once I did that, I was able to get a good training session from my model and finally submitted my first decent score of 28:350 o the London Loop, which at the time put me at rank 145.\n\nI then trained the model further and decreased that time too 25.932 at rank 115.\n\nI was pretty happy at that point and I've left it there, gradually decreasing down to 155 between the time of me returning to my real job and writing this post.\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+13.28.03.png)\n\nUltimately, for me, the whole process of creating code, testing it, reiterating it and then finally succeeding at a goal was great. As developers, we are often doing the same project month after month, not really moving between extremely different technologies and generally staying within the same lane that we started on.\n\nFor me, side-projects like creating a DeepRacer model over the weekend is a lot of fun, and although all  I really did was spend $70 on a simulation of a race for the achievement of a virtual score within a virtual league, I think I learned a lot from doing it.\n\n## And that's it\n\nTime to get testing!\n\n![](https://media.giphy.com/media/6mGzvKGJGsYH6/giphy.gif)",
    "createdAt": "2019-05-19T14:32:01.598Z",
    "createdAt#updatedAt": "2019-05-19T14:32:01.598Z#2019-05-19T14:32:01.598Z",
    "ctime": "2019-05-19",
    "description": "Here are the results of my weekend playing around with AWS DeepRacer",
    "header": "https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+12.19.03.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"javascript,AWS, AWS DeepRacer, Machine Learning\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/deepracer-thumbnail.png",
    "title": "My weekend with AWS DeepRacer",
    "updatedAt": "2019-05-19T14:32:01.598Z"
  },
  {
    "id": "4a09d04a-fef0-4beb-adad-6c80934a0d5c",
    "content": "\nService Workers have been around for quite a  while now and are awesome little JavaScript that can change the value that your site provides from behind something tethered to a mobile connection to a fully fledged progressive web app, ready for consumption on the mobile web, wherever your users are.\n\nI remember being one of the first people I saw integrating them on sites back when I was  managing my technology blog, TechNNutty, allowing me to dramatically reduce the loading  time of that site without having the spend more money than I had to, for that reason alone, Service Workers are a no brainer for any website, top that with the ability to save content for offline consumption, send push notifications and more and you have the solution for modern websites, without any integration mess.\n\nSo if you haven't already, I would definitely advice following through this and getting set up with your own Service Worker set up.\n\n## Before we begin\n\nBefore you  start building a Service Worker, you should definitely read up on the topic from various sources, they'll know and explain it a lot better than me. [Google has some great articles and posts about all things Service Worker](https://developers.google.com/web/fundamentals/primers/service-workers/).\n\nYou should also note that Service Worker is bound to a particular scope, that means it can only be installed and can only control a singular domain, usually your main root domain so you may want to think about your application structure before getting placing code.\n\nThat last part also means that you need access to your websites, root directory. You also cannot host a Service Worker on a CDN.\n\nThat's still not all.\n\nYou also need to be using HTTPS across your site (You will be able to load it on localhost on Chrome for dev) and you should note that Service Worker is currently only supported on selected browsers Jake Archibald's [is Serviceworker ready](https://jakearchibald.github.io/isserviceworkerready/) site is a great place to check the status of support for various Service Worker related features.\n\n## Getting your app to register a Service Worker\n\nThanks to the browser's implementation of the Service Worker spec, it's actually really easy to get started and  register a Service Worker, so before we actually create any code, that will be the first part that we will complete.\n\nHere's the code that I'm using on  this  site:\n\n```javascript\nwindow.addEventListener(\"DOMContentLoaded\", function (event) {\n    // Load the service worker         \n    if ('serviceWorker' in navigator) { \n        navigator.serviceWorker.register('/serviceworker.js', { scope: '/'})            .then( function( registration) {\n                console.log(`Service Worker successfully registered for`, registration.scope);\n            })\n            .catch( function( error ) {\n                console.log(`ServiceWorker not registered: ${error}`);\n            });\n        if(navigator.serviceWorker.controller) {\n            window.addEventListener('load', function() {\n                navigator.serviceWorker.controller.postMessage({'command': 'trimCaches'});\n            })\n        }\n    }\n});\n```\n\nBasically, this waits for the DOM to lo load, checks for Service Worker support and then installs SW if it is supported.\n\nThe part that actually installs the script is the following line:\n\n```javascript\n    navigator.serviceWorker.register('/serviceworker.js', { scope: '/'});\n```\n\nThis basically says what the path to the file is and the scope that Service Worker should use.\n\nAs you can see, this also use promises, so you can also throw in some validation checking and reporting.\n\nI've also added a postMessage for trimming the cache, which we will get to later.\n\n## Installing your Service Worker\n\nNow it is time to get started on the creation of your Service Worker file, for this I am naming my file 'serviceworker.js' but you can call it whatever you like.\n\nAt the start of the file, you should add some global variables to make your life easier further down the line. My globals look like this:\n\n```javascript\n    // The names for our caches and the version number \n    const version = \"-v1.0.5\"; \n    const staticCache = \"cachedFiles\" + version; \n    const pagesCache = \"cachedPages\"; \n    const imagesCache = \"cachedImages\"; \n    const cacheList = [staticCache, pagesCache, imagesCache];  \n    // Our list of paths to cache on install \n    const pagesToCache = [\"/\", \"/offline\"];  \n    // Static files to cache on install \n    const staticsToCache = [   \"static/js/typed.min.js\",   \"static/js/nghpjs.js\",   \"static/js/lazyload.min.js\" ];\n```\n\nThey are all pretty self-explanatory, but what I am basically doing here is naming our caches and setting what files should be cached on install. If you are creating an offline-ready PWA, you should include an offline page here as well that displays some sort of message to your offline users.\n\nMine's pretty simplistic:\n\n![](https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+20.56.30.png)\n\nI also added the following function that stores the  files so I don't have to repeat myself a lot:\n\n```javascript\n    // The names for our caches and the version number \n    const version = \"-v1.0.5\"; \n    const staticCache = \"cachedFiles\" + version; \n    const pagesCache = \"cachedPages\"; \n    const imagesCache = \"cachedImages\"; \n    const cacheList = [staticCache, pagesCache, imagesCache];  \n    // Our list of paths to cache on install \n    const pagesToCache = [\"/\", \"/offline\"];  \n    // Static files to cache on install \n    const staticsToCache = [   \"static/js/typed.min.js\",   \"static/js/nghpjs.js\",   \"static/js/lazyload.min.js\" ];\n```\n\nFrom here, the install event is as easy as the following:\n\n```javascript\n    // Install event will trigger when first initated \n    addEventListener(\"install\", installEvent => {   skipWaiting();   \n        // tell the browser to delay the SW installation until cache is populated   \n        installEvent.waitUntil(     \n            // now populate the cache (cache the files) using the Cache API     \n            // 1\\. Open the cache     \n            caches.open(staticCache).then(staticCache => {       \n                // Cache pages       \n                caches.open(pagesCache).then(pagesCache => {         \n                    pagesCache.addAll(pagesToCache);       \n                });        \n                return staticCache.addAll(staticsToCache);     \n            })   \n        ); \n    });\n```\n\nThis simply listens for the install event and then adds all of the base files to our cache.\n\nThe 'skipWaiting()' callback is optional here, it basically forces the waiting service worker to become the active service worker right away.\n\n## Caching and returning requests from Service Worker\n\nAs Service Worker pretty much controls your network requests, you'll also need to set up a fetch event, this will tell Service  Worker what to cache and how to respond to requests.\n\nYou can do this as simply as the following:\n\n```javascript\n    self.addEventListener('fetch', function(event) {   \n        event.respondWith(     \n            caches.match(event.request)       \n            .then(function(response) {         \n                // Cache hit - return response         \n                if (response) {           \n                    return response;         \n                }          \n                return fetch(event.request).then(           \n                    function(response) {             \n                        // Check if we received a valid response             \n                        if(!response || response.status !== 200 || response.type !== 'basic') {               \n                            return response;             \n                        }              \n                        // IMPORTANT: Clone the response. A response is a stream      // and because we want the browser to consume the response    // as well as the cache consuming the response, we need       // to clone it so we have two streams.             \n                        var responseToCache = response.clone();              caches.open(CACHE_NAME)               \n                        .then(function(cache) {                 \n                            cache.put(event.request, responseToCache);               \n                        });              \n                        return response;           \n                    }         \n                );       \n            })     \n        ); \n    });\n```\n\nThat example is from [Google's post](https://developers.google.com/web/fundamentals/primers/service-workers/), for my own site, I  took things a little further than that as I wanted to separate caches and how they were handled.\n\n```javascript\n    // trigger this event when a path is requested \n    addEventListener(\"fetch\", fetchEvent => {   \n        const request = fetchEvent.request;    \n        // Check if the request URL is from us, otherwise ignore it   \n        if (     request.url.indexOf(\"https://nicholasgriffin.dev\") ||     request.url.indexOf(\"http://localhost:8080\")   ) {\n```\n\nTo start, I added an indexOf to check if the requested  URL was from my own domain, as I don't want to cache other resources (this can break your site pretty easily), later down the line, I could expand this to add third-party caching for resources that I know work with Service Worker, like my CDN for example, for know I am simply ignoring other domains.\n\nI then split my  caching into three sections.\n\n**HTML Resources**\n\n```javascript\n    if (request.headers.get(\"Accept\").includes(\"text/html\")) {       \n        // respons with this if a page       \n        fetchEvent.respondWith(         \n            fetch(request)           \n            .then(responseFromFetch => {             \n                const copy = responseFromFetch.clone();              \n                fetchEvent.waitUntil(               \n                    caches.open(pagesCache).then(pagesCache => {                 \n                        pagesCache.put(request, copy);               \n                    })             \n                );              \n                return responseFromFetch;           \n            })           \n            // If the response errors           \n            .catch(error => {             \n                return caches.match(request).then(responseFromCache => {\n                    if (responseFromCache) {                 \n                        return responseFromCache;               \n                    }                \n                    // serve offlie page               \n                    return caches.match(\"/offline\");             \n                });           \n            })       \n        );        \n        return;     \n    }\n```\n\n**Image Resources**\n\n```javascript\n    // Check if the request is for an image     \n    if (request.headers.get(\"Accept\").includes(\"image\")) {       \n        fetchEvent.respondWith(         \n            caches.match(request).then(responseFromCache => {           \n                // If the image is already in the cache, return it           \n                if (responseFromCache) {             \n                    fetchEvent.waitUntil(stashInCache(request, imagesCache));\n                    return responseFromCache;           \n                } else {             \n                    return (               \n                        fetch(request)                 \n                        .then(responseFromFetch => {                   \n                            const copy = responseFromFetch.clone();\n                            fetchEvent.waitUntil(                     \n                                caches.open(imagesCache).then(imageCache => {\n                                    imageCache.put(request, copy);\n                                })                   \n                            );                   \n                            return responseFromFetch;                 \n                        })                 \n                        // If the response errors                 \n                        .catch(error => {                   \n                            return caches.match(\"/offline.png\");                 \n                        })             \n                    );           \n                }         \n            })       \n        );        \n        return;    \n    }\n```\n\n**Everything else**\n\n```javascript\n    // for everything else     \n    fetchEvent.respondWith(       \n        caches.match(request).then(responseFromCache => {         \n            fetchEvent.waitUntil(           \n                fetch(request).then(responseFromFetch => {             \n                    caches.open(pagesCache).then(pagesCache => {               \n                        return pagesCache.put(request, responseFromFetch);\n                    });           \n                })         \n            );         \n            return responseFromCache;       \n        })     \n    );\n```\n\nAnd from that point, you'll have a pretty mean Service Worker. But there is a bit more that  you can do.\n\n## Updating the Service Worker\n\nOne pretty important task is to add an 'activate' event listener. This is important as it will allow you to clear out any old cache files.\n\nI'm doing that will the following:\n\n```javascript\n    addEventListener(\"activate\", activateEvent => {\n  activateEvent.waitUntil(\n    // Clean up caches and clear old ones on activate\n    caches\n      .keys()\n      .then(cacheNames => {\n        return Promise.all(\n          cacheNames.map(cacheName => {\n            if (!cacheList.includes(cacheName)) {\n              return caches.delete(cacheName);\n            }\n          })\n        );\n      })\n      .then(() => {\n        return clients.claim();\n      })\n  );\n});\n```\n\nI also have the following function for trimming the cache on every page load so that it doesn't load to much on my user's machines.\n\nThis is done with  the following via the PostMessage that I mentioned earlier, limiting the pagesCache and imagesCache to 30:\n\n```javascript\nfunction trimCache(cacheName, maxItems) {\n  caches.open(cacheName).then(cache => {\n    cache.keys().then(keys => {\n      if (keys.length > maxItems) {\n        cache.delete(keys[0]).then(trimCache(cacheName, maxItems));\n      }\n    });\n  });\n}\n```\n\nI don't include the staticCache in this as I pretty much always want those resources cached.\n\n## And that's it\n\nPretty easy right?\n\nIf you'd like to see my complete code and don't fancy taking a look through Developer Tools, [I've uploaded it to my Github here](https://github.com/nicholasgriffintn/NG_Website_SW).\n\nWhen even a tractor can be fast, your site should be, no question.\n\n![](https://media.giphy.com/media/pZEwBYdHdN2s8/giphy.gif)\n",
    "createdAt": "2019-05-19T14:48:27+0000",
    "createdAt#updatedAt": "2019-05-19T14:48:27+0000#2019-05-19T14:48:27+0000",
    "ctime": "2019-05-19",
    "description": "Whoops! I forgot to add Service Worker to my site. Probably about time to do that...",
    "header": "https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-19+at+20.24.38.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"javascript,service worker\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/service-thumbnail.png",
    "title": "Adding Service Worker to my site",
    "updatedAt": "2019-05-19T14:48:27+0000"
  },
  {
    "id": "e64e04d9-72f3-44fa-8ee3-39c9c8f28715",
    "content": "## So it has been some time since I last posted any content on the web...\n\nBack in May 2011, I started my own technology, gadget and gaming site on the web called Technutty. It originally started out as an idea that I hoped would help me get better at writing content while working on various things that I wanted to learn over the next few years.\n\nAnd this worked out pretty well, which is strange considering that this never normally happens in the real world.\n\nI kept running the site for a few years and over time I found myself reviewing more technology products for companies, spending longer researching things to write and coming up with ways to expand the site even further, but despite enjoying the work, I wasn't really enjoying the time I had to spend on it and my passions where moving closer to front and back end web development, stemming from some of the freelance work that I was doing as well as the work that I was doing to improve the site so I decided that it was time to move on.\n\n![](https://media.giphy.com/media/k8php2iMXNUmA/giphy.gif)\n\nSo long story short, in Jan 2019 I shut down TechNutty and started a new role as a web developer at a company called Accrosoft.\n\nI have now been there for over a year, working on numerous projects for a range of companies across the globe, all of which are helping me to expand my capabilities and makes every day a little more interesting, however, I found that I am now doing less for myself and I don't like the idea of that, so I'm tackling it head-on.\n\nAlongside the release of this blog post, I have created a brand new server for my personal site (now on a .dev domain!), which uses docker and a custom Node environment with Express.\n\nI am hoping that with this new server I will be able to start working on a number of projects that I can talk about here, or not.\n\nBasically, I'm just looking to do me a little more.\n\nFeel free to follow along.\n\n![](https://media.giphy.com/media/oS8pRFxbD0d44/giphy.gif)",
    "createdAt": "2019-04-01T14:48:27+0000",
    "createdAt#updatedAt": "2019-04-01T14:48:27+0000#2019-04-01T14:48:27+0000",
    "ctime": "2019-04-01",
    "description": "Nicholas Griffin V.Something",
    "header": "https://i.ibb.co/g6MPvkg/Screenshot-2019-03-02-at-21-45-38.jpg",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"Meta\"}}",
    "thumbnail": "https://i.ibb.co/g6MPvkg/Screenshot-2019-03-02-at-21-45-38.jpg",
    "title": "Let's begin again...",
    "updatedAt": "2019-04-01T14:48:27+0000"
  },
  {
    "id": "28d0d116-9f52-4ac2-bb64-d94f0da5c948",
    "content": "Earlier this week I created my own personal email service as the initial step towards building my own bookmarks service for my personal site.\n\nThis service receives an email and then categorises it into a selection of folders, from which I plan to build additional services to parse data from these folders and then action on that data according to the category, today we are building the first of those additional services, my bookmarks service.\n\nYou can find out more about the categorisation Lambda here: https://nicholasgriffin.dev/blog/cf3c4661-f676-4028-879b-f2686852b82b\n\n## Starting off our Serverless service\n\nTo kick things off, we need to initialise our new Serverless service that will become a Lambda and API Gateway once we deploy it.\n\nFor me, this starts with the basic Serverless configuration, which is:\n\n```yaml\nservice: serverless-bookmarks-service\n\nprovider:\n  name: aws\n  runtime: nodejs12.x\n  stage: prod\n  region: eu-west-1\n  stackName: serverless-bookmarks-service-stack\n  apiName: serverless-bookmarks-service-api\n  iamRoleStatements:\n    - Effect: 'Allow'\n      Action:\n        - 's3:*'\n      Resource: 'arn:aws:s3:::email.nicholasgriffin.dev/*'\n```\n\nI have also set up a function for processing the emails that have been stored in order processed bookmarks folder like so:\n\n```yaml\nfunctions:\n  process:\n    handler: handler.process\n    description: Process Bookmark emails to DynamoDB\n    timeout: 15\n    events:\n      - s3:\n          bucket: email.nicholasgriffin.dev\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: processed/bookmarks/\n            - suffix: .json\n          existing: true\n```\n\nI’ll add some API functions here later as well, but for now, this is the first step.\n\n## Creating a function to process our stored Bookmark emails\n\nFor our process function, we need to start by creating a couple of variables for the event data that AWS sends when the function is triggered via the rules we set above.\n\nThese are:\n\n```javascript\nconst bucket = event.Records[0].s3.bucket;\n      const object = event.Records[0].s3.object;\n```\n\nThe bucket variable will contain data about the bucket that the file is stored in, including the name, ownerIdentity and the arn for the bucket.\n\nThe object variable contains all the data for the file itself, including the key, size, eTag, and sequencer.\n\nTake not that this will not provide the actual file data, so we need to grab that separately, which we will do like so:\n\n```javascript\n      const bookmarkBucket = event.Records[0].s3.bucket.name;\n      const bookmarkKey = decodeURIComponent(event.Records[0].s3.object.key.replace(/\\+/g, ' '));\n\n      console.info(\n        `Fetching email at s3://${bookmarkBucket}/${bookmarkKey}`\n      );\n\n      const data = await s3\n        .getObject({\n          Bucket: bookmarkBucket,\n          Key: bookmarkKey,\n        })\n        .promise();\n```\n\nThe data object should now contain all of the data for the bookmark email that we previously stored.\n\nFrom here, we’ll need to process the contents into a DynamoDB table.\n\nWe are pushing it to a DynamoDB table so that we can ensure that all data that end up accessible to the API has been processed correctly and validated.\n\n### Setting up my Bookmarks DynamoDB table\n\nTo get started with storing on DynamoDB, I’ll need to create a table first.  This is very simple, just head on over to the DynamoDB section within AWS here:\n\nhttps://eu-west-1.console.aws.amazon.com/dynamodbv2/home?region=eu-west-1#dashboard\n\nAnd click the Tables option on the left-hand side. From this page hit the “Create table” button to create a new table!\n\nI’m naming mine “Bookmarks-Service” and setting the partition key as “id” with the type string, as each of our Bookmarks will have its own unique ID.\n\nFor the sort key, I will add a new string value named ‘status’, this will be for sorting the bookmarks by verified and unverified statuses.\n\nLeave everything as default and click the “Create table button” at the bottom as these are all sensible settings, no further configuration is required unless you really want to.\n\nOnce the creation has finished, grab a note of your ARN for the DB as you’ll need that later.\n\n### Parsing my bookmarks email\n\nSo now it’s time for the fun part, parsing my bookmarks email.\n\nIn my inbox service, I am storing the data as JSON and it comes out to be similar to this (with the headers and attachments removed to make it smaller):\n\n```json\n{\n    \"id\": \"1o7micppvf093nffskmek05ts00kcml2d92tbqo1\",\n    \"received\": \"2021-08-29T18:37:27.000Z\",\n    \"to\": {\n        \"value\": [\n            {\n                \"address\": \"bookmarks@nicholasgriffin.dev\",\n                \"name\": \"\"\n            }\n        ],\n        \"html\": \"<span class=\\\"mp_address_group\\\"><a href=\\\"mailto:bookmarks@nicholasgriffin.dev\\\" class=\\\"mp_address_email\\\">bookmarks@nicholasgriffin.dev</a></span>\",\n        \"text\": \"bookmarks@nicholasgriffin.dev\"\n    },\n    \"from\": {\n        \"value\": [\n            {\n                \"address\": \"me@nicholasgriffin.co.uk\",\n                \"name\": \"Nicholas Griffin\"\n            }\n        ],\n        \"html\": \"<span class=\\\"mp_address_group\\\"><span class=\\\"mp_address_name\\\">Nicholas Griffin</span> &lt;<a href=\\\"mailto:me@nicholasgriffin.co.uk\\\" class=\\\"mp_address_email\\\">me@nicholasgriffin.co.uk</a>&gt;</span>\",\n        \"text\": \"Nicholas Griffin <me@nicholasgriffin.co.uk>\"\n    },\n    \"subject\": \"Test with new roles\",\n    \"headers\": [\n    ],\n    \"attachments\": [\n    ],\n    \"html\": \"<html><head></head><body><div><br></div><div><br></div><div id=\\\"protonmail_signature_block\\\" class=\\\"protonmail_signature_block\\\"><div><div>Thanks,<br></div><div><br></div><div>Nicholas Griffin</div></div></div> </body></html>\\n\\n\\n\"\n}\n```\n\nFor id, received and subject, we can already consider that processed and good to go.\n\nFor the to and from, we’ll just want to trim that down so that we just have the name and address, which is done quite easily: `from.value[0].address` and `from.value[0].name`.\n\nThe tricky part will be the HTML, as here what I’ll need to do is go through the contents of the email in order to find the attribute that I need for my bookmark.\n\nI’m going to do this by using indexOf and substring, probably not the best way to do it, but it works and I don’t want to commit too much time to this just yet, so that’s what I’m using :), feel free to pop a pull request in if you can think of something better xD.\n\nAnyway, so with that, we end up with the following code to process our data into an object that we can send to DynamoDB:\n\n```javascript\nconst { id, received, subject, from, to, html } = json;\n\n          const fromAddress = from.value[0].address;\n          const fromName = from.value[0].name;\n\n          const toAddress = to.value[0].address;\n          const toName = to.value[0].name;\n\n          // TODO: parse the html for bookmark data\n          const bookmark = {};\n\n          function extractData(data, startStr, endStr) {\n            subStrStart = data.indexOf(startStr) + startStr.length;\n            return data.substring(\n              subStrStart,\n              subStrStart + data.substring(subStrStart).indexOf(endStr)\n            );\n          }\n\n          bookmark.title = extractData(html, '<div>Title: ', '</div>');\n          bookmark.description = extractData(\n            html,\n            '<div>Description: ',\n            '</div>'\n          );\n          bookmark.url = extractData(html, '<div>URL:&nbsp;', '</div>');\n```\n\nWe then create another object in the format thatwill  dynamoDB will accept this data and then we store it:\n\n```javascript\nconst dataOutput = {\n              Item: {\n                id: {\n                  S: id,\n                },\n                status: {\n                  S: 'unverified',\n                },\n                recieved: {\n                  S: recieved,\n                },\n                bookmark: {\n                  S: JSON.stringify(bookmark),\n                },\n                subject: {\n                  S: subject,\n                },\n                fromAddress: {\n                  S: fromAddress,\n                },\n                fromName: {\n                  S: fromName,\n                },\n                toAddress: {\n                  S: toAddress,\n                },\n                toName: {\n                  S: toName,\n                },\n              },\n            };\n\n            var params = {\n              Item: dataOutput.Item,\n              TableName: config.tableName,\n            };\n\n            const result = await dynamodb.putItem(params).promise();\n```\n\nAnd now that has been done, we can delete the original object and return the result:\n\n```javascript\n              await s3\n                .deleteObject({\n                  Bucket: bookmarkBucket,\n                  Key: bookmarkKey,\n                })\n                .promise();\n\n              return {\n                statusCode: 200,\n                body: JSON.stringify({\n                  message: result,\n                  event,\n                }),\n              };\n```\n\nAnd that’s it, now we have a service that will process our bookmarks emails and then store that processed data in DynamoDB.\n\nNext up, we need to create our GraphQL service that will allow us to interact with this stored data, but before then it’s time to have quick break.\n\nWhile you are on your break you can check out the code here (spoilers: this may include the API by the time you look at it): https://github.com/nicholasgriffintn/Bookmarks-Service\n\n**Update: You can [check out part 2 here](https://nicholasgriffin.dev/blog/5dd68d54-9dc4-4dc5-9c74-cae872971b17)**\n\n![Success](https://media.giphy.com/media/aWRWTF27ilPzy/giphy.gif?cid=ecf05e47i3zrmjhvrwwhybm48eydc7705ka4xd0u9y490ca9&rid=giphy.gif&ct=g)",
    "createdAt": "2021-08-30T12:53:26Z",
    "createdAt#updatedAt": "2021-08-30T12:53:26Z#2021-08-30T12:53:26Z",
    "ctime": "",
    "description": "A new Serverless Lambda that will parse Bookmarks data into DynamoDB",
    "header": "https://cdn.nicholasgriffin.dev/serverless-bookmarks-service-process/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"AWS, Lambda, Serverless, DynamoDB\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/serverless-bookmarks-service-process/thumbnail.png",
    "title": "Building my own bookmarks service - Part 1",
    "updatedAt": "2021-08-30T14:04:55.183Z"
  },
  {
    "id": "0d1ea0d3-04ab-447a-a3fe-b888299f21aa",
    "content": "\nSo alongside my adventures with Nuxt and static sites yesterday, I thought it would be a good time to start using CI/CD for my personal website with the help of AWS CodePipeline. I have been using this a lot at work for a few projects and I have to say, it is a fantastic tool for quickly and automatically building and deploying a website to a range of Amazon's services, including ECS, EC2, S3 and many more.\n\nAs we are building a static site, we will be deploying straight to an S3 bucket that will have static website hosting enabled. The pipeline will be triggered by a commit to a branch within my personal website's repo onn Github, you can also use CodeCommit if you prefer to keep it within AWS, personally, I prefer Github as it works with more services.\n\n## Setting up our repo\n\nI'm going to assume that you already have your static website committed to a master branch of a repo somewhere.\n\nThat's completely fine, however, if you are going to be using a static site generator like Nuxt or Gatsby then you are going to want to split your build files from the build tool, as you don't want the build tool going up to your S3 bucket or your website.\n\nYou could just create two repos for this and that would work, however, I prefer to create two main branches within a single repo that I can then target depending on what I want to do.\n\nFor this, I left the master branch as my branch for my website's build and then created a second branch for the deployments, called master-deploy.\n\n![Github branches](https://cdn.nicholasgriffin.dev/images/Hosting+my+static+site+on+S3+with+AWS+CodePipeline/Screenshot+2019-05-31+at+17.02.46.png)\n\nYou will find that Github might tell you one branch is outdated with this method, as you will have to commit seperately every time you push new content, however, in my opinion, it makes the whole process cleaner and you can probably ignore most of that annyway as once this is set up, you probably won't have to go to the UI all that often.\n\nOnce that's done you should commit your first build to the deploy branch ready for the next steps.\n\n## Creating our S3 bucket\n\nBefore we can create our pipeline, you'll need to create and setup a new S3 bucket to host your website on.\n\nI'll let Amazon explain the initial processes of this, as it's quite simple and is likely to change a lot. You just need to make sure that you name your bucket with the same domain name that you'll be using for the HTTP access. So for me, that would be 'nicholasgriffin.dev'.\n\nOnce created, you'll want to attach a policy to your bucket to ensure that all files are public.\n\nAs the whole idea of this is that deploys will happen automatically, we don't want to be setting permissions manually.\n\nYou can do this by clicking on the permissions tab within you S3 bucket and then on Bucket policy. There you'll need to add the following to the policy editor.\n\n```yaml\n{\n    \"Version\": \"2008-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AllowPublicRead\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": \"*\"\n            },\n            \"Action\": \"s3:GetObject\",\n            \"Resource\": \"arn:aws:s3:::nicholasgriffin.dev/*\"\n        }\n    ]\n}\n```\n\nYou'll need to change the ARN to your S3's path,  however, once you've copied that in, all your files should allow public reading by default.\n\nNext you'll need to click on the 'Static website hosting' tab and enabled static hosting.\n\nEnter index.html for the index page and 200.html for the error page, or whatever your error page url and index page is. Nuxt has it's own error  handling so the error page doesn't matter too much.\n\n## Setting up CodePipeline\n\nOnce you have done both of those steps you'll be ready to set up your pipeline for deployments.\n\nTo do this, head over to CodePipeline in AWS and select 'New Pipeline', give your pipeline a fitting name and then select 'Next'.\n\n![CodePipeline Add Source](https://cdn.nicholasgriffin.dev/images/Hosting+my+static+site+on+S3+with+AWS+CodePipeline/Screenshot+2019-05-31+at+17.50.58.png)\n\nNext you'll need to add a source provider.\n\nWe are using Github, once you select  that you have to connect you account and then select both the repo that you want to use and the branch, like what I've selected in the above image.\n\nYou should also use the recommended detection option of Github webhooks.\n\nOnce that's done you can move onto the next step, which should be the build stage, we're not using this stage so we'll skip this and move onto the next stage.\n\nOn the build stage, you will need to select the deploy provider and set up the settings.\n\n![CodePipeline Deploy Options](https://cdn.nicholasgriffin.dev/images/Hosting+my+static+site+on+S3+with+AWS+CodePipeline/Screenshot+2019-05-31+at+17.54.39.png)\n\nFor this, we will be using Amazon S3 as the provider.\n\nOnce selected you'll need to select the bucket region and name that you want to use, then ignore the S3 object key and just check 'Extract file before deploy', the key input will then change to a path, we don't need that, but you can use it if you like.\n\nOnce that's done all that's left is for you to review and deploy, it really is that simple.\n\n## That really is it\n\nYou now have simple pipeline that will ensure that your deployments are quick and painless.\n\n![](https://media.giphy.com/media/D83jHtnO0LPQk/giphy.gif)",
    "createdAt": "2019-05-31T14:48:27+0000",
    "createdAt#updatedAt": "2019-05-31T14:48:27+0000#2019-05-31T14:48:27+0000",
    "ctime": "2019-05-31",
    "description": "How I'm using AWS CodePipeline to automatically build and push my site to AWS' S3",
    "header": "https://cdn.nicholasgriffin.dev/images/Hosting+my+static+site+on+S3+with+AWS+CodePipeline/Screenshot+2019-05-31+at+17.59.07.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"javascript,AWS,static site,AWS CodePipeline,AWS S3\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/codepipeline-thumbnail.png",
    "title": "Hosting my static site on S3 with AWS CodePipeline",
    "updatedAt": "2019-05-31T14:48:27+0000"
  },
  {
    "id": "067daa70-1d44-4969-b8b7-c1d7f8d48007",
    "content": "\nSo far in Project NG 2020, I have published a number of posts about the launch of my new website for 2020, which is a NextJS website and blog that's backed by Express and Postgres.\n\nWe've adding authentication via AWS Cognito, launched a new website and blog with NextJS and got started with a few new APIs like my new image resizing API.\n\nToday, I'm going to talk about how I added my own posting dashboard for publishing and editing my content, without the need of using a third-party CMS, the main goal being to make sure that this site has no requirements on anything else.\n\nLet's get started.\n\n### Creating our Express API\n\nBefore we started, we're going to need to set up an Express API that will take care of the publishing and editing of the content, the code for this API is below.\n\n```javascript\nserver.post(`/api/admin/content`, limiter, async function (req, res) {\n  if (req.token) {\n    cognitoExpress.validate(req.token, async function (err, response) {\n      if (err || !response) {\n        res.status(403).json({ error: \"Token invalid\" });\n      } else {\n        req.apicacheGroup = \"content-api\";\n\n        try {\n          if (\n            req.body &&\n            req.body.slug &&\n            req.body.title &&\n            req.body.description &&\n            req.body.tags &&\n            req.body.thumbnail &&\n            req.body.header &&\n            req.body.content\n          ) {\n            const postData = await models.article.findByPk(req.body.slug);\n            if (postData) {\n              const record = await models.article.update(\n                {\n                  id: req.body.slug,\n                  title: req.body.title,\n                  published: req.body.published || false,\n                  description: req.body.description,\n                  tags: req.body.tags,\n                  thumbnail: req.body.thumbnail,\n                  header: req.body.header,\n                  content: req.body.content,\n                },\n                { where: { id: req.body.slug } }\n              );\n\n              await redis.del(`model:article:${req.body.slug}`);\n\n              res.status(200).json({ record });\n            } else {\n              const record = await models.article.create({\n                id: req.body.slug,\n                title: req.body.title,\n                published: req.body.published || false,\n                description: req.body.description,\n                tags: req.body.tags,\n                thumbnail: req.body.thumbnail,\n                header: req.body.header,\n                content: req.body.content,\n              });\n              res.status(200).json({ record });\n            }\n          } else {\n            res.status(500).json({ error: \"Incorrect params\" });\n          }\n        } catch (error) {\n          res.status(500).json({ error: error });\n        }\n      }\n    });\n  } else {\n    res.status(403).json({ error: \"Token invalid\" });\n  }\n});\n```\n\nIt might look like a lot of code, but it's quite simple.\n\nBasically, my blog has the following fields in the modal:\n\n- id\n- slug\n- title\n  -description\n- tags\n- thumbnail\n- header\n- content\n\nWithin this API, we're simply checking for all of these fields and then storing the data in our articles modal.\n\nWe also have a check here to see if the slug already exists as a post in our DB, if it does we are going to update the record, if it doesn't we're creating it.\n\nWhen we're done, we will respond with the content.\n\nIn the future, I want to update this so that alongside the DB a markdown file is also stored on the server as a form of a backup.\n\n### Creating our dashboard page\n\nFor our dashboard page, I've decided to keep things simple with a React Component rather than a Functional Component.\n\n**Setting the state**\n\nTo start, on our page, we need to set up the state for all of the fields that we want to save as mentioned above.\n\n```javascript\nconstructor(props) {\n    super(props);\n    this.state = {\n      user: \"\",\n      title: \"\",\n      description: \"\",\n      tags: \"\",\n      thumbnail: \"\",\n      header: \"\",\n      content: \"\",\n      postData: {},\n      id: \"\",\n      isEditing: false,\n    };\n  }\n```\n\nNext up is a componentDidMount function that will check if the user is logged in an set the state for the user.\n\nWe also have a check here for the prop postData, which we will set further down the page as a prop.\n\nWe'll then use the data from that to set the state for all of the params as well as the isEditing state.\n\n```javascript\n  componentDidMount() {\n    const { user, loggedIn } = checkLoggedIn();\n    if (!loggedIn) {\n      redirect({}, \"/login\");\n    } else if (user) {\n      this.setState({ user: user });\n    } else {\n      redirect({}, \"/login\");\n    }\n\n    if (this.props.postData && this.props.postData.article) {\n      this.setState({\n        isEditing: true,\n        title: this.props.postData.article.title || \"\",\n        description: this.props.postData.article.description || \"\",\n        content: this.props.postData.article.content || \"\",\n        header: this.props.postData.article.header || \"\",\n        thumbnail: this.props.postData.article.thumbnail || \"\",\n        tags: this.props.postData.article.tags || \"\",\n        id: this.props.postData.article.id || \"\",\n      });\n    }\n  }\n```\n\nThis will allow us to publish content as well as update it.\n\nAs I'm using NextJS, I can set the props for the postData with a function called getInitialProps, like so:\n\n```javascript\nDashboard.getInitialProps = async (context) => {\n  let error = false;\n  let loading = true;\n  let postData = {};\n\n  if (context.query && context.query.article) {\n    return fetch(config.appUrl + \"/api/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        operationName: \"GetArticle\",\n        variables: { id: context.query.article },\n        query: `query GetArticle {\n        article(id: \"${context.query.article}\") {\n          id\n          title\n          content\n          description\n          tags\n          thumbnail\n          header\n          createdAt\n          updatedAt\n        }\n      }`,\n      }),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((responseAsJson) => {\n        loading = false;\n\n        // Pass data to the page via props\n        return { postData: responseAsJson.data };\n      })\n      .catch((e) => {\n        console.error(\"error generating server side code\");\n        console.error(e);\n        return { postData: { message: \"No article id found\" } };\n      });\n  } else {\n    error = {\n      message: \"No article id found\",\n    };\n    loading = false;\n    return { postData: { message: \"No article id found\" } };\n  }\n};\n```\n\nThis is looking for the query parameter ?article=, it's then pinging my GraphQL for retrieving content from an ID, you could make this a REST request quite easily as well.\n\nOnce the content has been retrieved, the data is passed to the page via props.\n\nNow we're ready to get started with the html code, which I've on a similar level of simplicity.\n\nHere's the initial code:\n\n```javascript\n{\n  this.state.isEditing && this.props.postData && this.props.postData.article ? (\n    <h2>Edit the post: {this.props.postData.article.title}</h2>\n  ) : (\n    <h2>Create a post</h2>\n  );\n}\n\n<PostForm\n  isEditing={this.state.isEditing}\n  id={this.state.id}\n  title={this.state.title}\n  description={this.state.description}\n  tags={this.state.tags}\n  thumbnail={this.state.thumbnail}\n  header={this.state.header}\n  content={this.state.content}\n  onTitleChange={this._handleChangeTitle}\n  onDescriptionChange={this._handleChangeDescription}\n  onTagsChange={this._handleChangeTags}\n  onThumbnailChange={this._handleChangeThumbnail}\n  onHeaderChange={this._handleChangeHeader}\n  onContentChange={this._handleChangeContent}\n/>;\n```\n\nBasically, this just shows a different title depending on if you are editing a post or not, and then it loads the PostForm component, which is the actual form for the editing and publishing.\n\nWe pass a bunch of props from this page to the component, which is basically just the state data and the on change events, which basically pass the inputs value back and then sets the state.\n\nHere's the code for the PostForm component:\n\n```javascript\nimport React from \"react\";\n\nconst ReactMarkdown = require(\"react-markdown\");\n\nimport ReactMde from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nexport default class PostForm extends React.Component {\n  render() {\n    return (\n      <div style={this.props.style}>\n        {this.props.id && (\n          <div className=\"form-control\">\n            <span>ID: {this.props.id}</span>\n          </div>\n        )}\n        <div className=\"form-control\">\n          <label className=\"form-control\">Title</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Title\"\n            onChange={this.props.onTitleChange}\n            value={this.props.title}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Description</label>\n          <textarea\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Description\"\n            onChange={this.props.onDescriptionChange}\n            value={this.props.description}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Tags</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Tags\"\n            onChange={this.props.onTagsChange}\n            value={this.props.tags}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Thumbnail</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Thumbnail\"\n            onChange={this.props.onThumbnailChange}\n            value={this.props.thumbnail}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Header</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Header\"\n            onChange={this.props.onHeaderChange}\n            value={this.props.header}\n          />\n        </div>\n        <div className=\"form-control post-editor markdown-editor\">\n          <label className=\"form-control\">Post Content</label>\n          <ReactMde\n            value={this.props.content}\n            onChange={this.props.onContentChange}\n          />\n          <div id=\"post-content\" className=\"preview\">\n            <ReactMarkdown source={this.props.content} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n```\n\nAs you can see at the bottom, I'm using markdown for my post content. At the bottom, there's a markdown editor, which I'm using a component called react-mde for. Next to that, I've added a preview of the post via the react-markdown plugin.\n\nThis makes it super easy to write content as markdowns really simple to edit with and it's great to see a preview as you write it, especially since it's using the final styles.\n\nWhen this form is submitted, the function that was passed in the props will run, which is:\n\n```javascript\n_handleSave = () => {\n  if (\n    this.state &&\n    this.state.user &&\n    this.state.user.idToken &&\n    this.state.user.idToken.jwtToken\n  ) {\n    if (\n      this.state.title &&\n      this.state.description &&\n      this.state.tags &&\n      this.state.thumbnail &&\n      this.state.header &&\n      this.state.content\n    ) {\n      var headers = new Headers();\n      headers.append(\n        \"Authorization\",\n        \"Bearer \" + this.state.user.idToken.jwtToken\n      );\n      headers.append(\"Content-Type\", \"application/json\");\n\n      var raw = JSON.stringify({\n        slug: this._slugify(this.state.title),\n        title: this.state.title,\n        published: true,\n        description: this.state.description,\n        tags: this.state.tags,\n        thumbnail: this.state.thumbnail,\n        header: this.state.header,\n        content: this.state.content,\n      });\n\n      var requestOptions = {\n        method: \"POST\",\n        headers: headers,\n        body: raw,\n        redirect: \"follow\",\n      };\n\n      fetch(\"/api/admin/content\", requestOptions)\n        .then((response) => response.text())\n        .then((result) => console.log(result))\n        .catch((error) => console.error(\"error\", error));\n    } else {\n      console.error(\"incorrect params\");\n    }\n  } else {\n    redirect({}, \"/login\");\n  }\n};\n```\n\nThis basically pushes the state function to the Express API that we defined at the start.\n",
    "createdAt": "2020-05-09T14:34:25.218Z",
    "createdAt#updatedAt": "2020-05-09T14:34:25.218Z#2020-05-09T14:34:25.218Z",
    "ctime": "2020-05-09",
    "description": "It's time to expand Project NG 2020 with a new dashboard for publishing and editing content",
    "header": "https://cdn.nicholasgriffin.dev/images/posts/project-ng-2020-adding-a-dashboard-to-my-site/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"Express, Cognito, blog, NextJS, React\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/images/posts/project-ng-2020-adding-a-dashboard-to-my-site/thumbnail.png",
    "title": "Adding a dashboard to my site",
    "updatedAt": "2020-05-09T14:34:25.218Z"
  },
  {
    "id": "52721f3b-298d-41dd-ba66-3ceb05e11ade",
    "content": "\nSo recently I attended the AWS Summit in London. There was a ton of new stuff to see at the show but alongside the DeepRacer demos, there was a clear focus on machine learning. Amazon has a ton of new machine learning tech to play with and I obviously want to take them up on that.\n\nTo kick things off, I wanted to see what I could do with their comprehend and recognition APIs as this seemed the most useful for the sort of work I do, in particular with user interaction.\n\nOne thing that I thought that would work really I particular would be a comments section, so that's what I'm going to make today, a comments system that points out when a user might be writing something that might be offensive.\n\n## How are we going to do that?\n\nThere are a few places that you could go to for APIs that can do sentiment analysis, however, as I do prefer AWS, we will be using AWS Comprehend.\n\nI like this API not only because I like AWS but also because it integrates well with AWS and is really simple to set up.\n\nObviously, in order to get started, you are going to need an AWS account and a credit/debit card behind it. That said, AWS Comprehend is actually pretty cheap and you only pay for what you use, on the free tier you'll get 50K units of text or 5M characters for free to use for the APIs included within Comprehend, starting from your first request, aside from the custom Classification and Custom Entities APIs.\n\nYou can [view the rest of the pricing here](https://aws.amazon.com/comprehend/pricing/).\n\nAlongside that, we will be setting up an API Gateway and a Lambda. To generate those I'll be using the [Serverless Framework](https://serverless.com/) because that's a lot more fun.\n\n## Setting up our Serverless environment\n\nGetting started with Serverless is really simple, just run the command 'npm install serverless -g' in your terminal window.\n\nOnce that's done, you can create a base project with 'serverless create --template aws-python3 --name comments-comprehend' and then deploy it with 'serverless deploy' (after adding your AWS keys). You should find two files after generating your template, a handler.py file for your lambda code and a serverless.yaml file for your serverless config. \n\nSimply change the names and values in both for what you're creating.\n\nYou'll also want to add the following to your provider config so that the iAM user created can access Comprehend, I have left this a wildcard, you should segment it down for application security.\n\n```yaml\niamRoleStatements: \n- Effect: Allow Action: \n- logs:CreateLogGroup \n- logs:CreateLogStream \n- logs:PutLogEvents \n- comprehend:DetectDominantLanguage \n- comprehend:DetectSentiment \nResource: \"*\"\n```\n\nAnd that's the first part of the serverless framework stuff done.\n\n## Configuring your Lambda  function\n\nNow you want to head over to your handler.py file and start editing.\n\nFirst add in the required imports:\n\n```python\n    import os, boto3, json\n```\n\nThen we are going to add a bit of code to show a message depending on the sentiment, one for negative comments and one for positive.\n\n```python\n    NEGATIVE_COMMENT_MESSAGE=\"Your comment is too negative to post, please edit it.\"\n    \n    POSITIVE_COMMENT_MESSAGE=\"Your comment looks great. Keep up the good work!\"\n    \n    client=boto3.client('comprehend')\n    \n    def sentimentAnalysis(event, context): \n        inputTranscriptData=event['queryStringParameters']['inputTranscript'] \n        \n        print(inputTranscriptData); \n        \n        sentiment=client.detect_sentiment(Text=inputTranscriptData,LanguageCode='en')['Sentiment'] \n        \n        if sentiment=='NEGATIVE': \n            return{\n                \"statusCode\": 200, \n                \"body\": json.dumps(NEGATIVE_COMMENT_MESSAGE)\n            } \n        else: \n            return{\n                \"statusCode\": 200, \n                \"body\": json.dumps(POSITIVE_COMMENT_MESSAGE)\n            }\n```\n\nThat's obviously pretty simplistic, however, that might be just about all we need, we can expand it later.\n\nNow you are ready to deploy that by running 'Serverless Deploy'.\n\n## Testing your function\n\nOnce pushed, you can test your function from within the  AWS Management Console with the following test or something  similar:\n\n```json\n    {\n        \"queryStringParameters\":{\n            \"inputTranscript\": \"I love flowers\"\n        }\n    }\n```\n\nFeel to change it to see what you get back.\n\n## Setting up API Gateway\n\nThis should already be done for you by Serverless, you may want to  add some authentication,  if you don't you can carry on, simply query your API Gateway domain with a query string of the text that you want to validate against, like the following:\n\nhttps://47477fgdhd.execute-api.eu-west-1.amazonaws.com/dev/sentiment-analysis?inputTranscript=I Love Flowers\n\nIt should return a 200 response alongside your text if you did everything right.\n\n## Linking everything together\n\nNow you just need to link the API Gateway to your front end. I built a simple front end form that show the validate message upon submit.\n\nYou can check that out alongside the rest of the code on my [Github](https://github.com/nicholasgriffintn/comments-comprehend). And if you are really interested, keep it bookmarked, I'll be updating it soon.\n",
    "createdAt": "2019-05-20T14:31:21.793Z",
    "createdAt#updatedAt": "2019-05-20T14:31:21.793Z#2019-05-20T14:31:21.793Z",
    "ctime": "2019-05-20",
    "description": "Using AWS Comprehend to perform Sentiment Analysis on comments.",
    "header": "https://cdn.nicholasgriffin.dev/images/Screenshot+2019-05-20+at+01.08.17.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"javascript,AWS, AWS Comprehend, Machine Learning\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/semantic-thumbnail.png",
    "title": "Using Sentiment Analysis to test user interaction",
    "updatedAt": "2019-05-20T14:31:21.793Z"
  },
  {
    "id": "cf3c4661-f676-4028-879b-f2686852b82b",
    "content": "Running a personal email inbox on SES\n\nThis week during the long weekend, I figured that I’d start a new project for a new service that I thought I’d build, a new Lambda that will receive emails from AWS SES and then store a bookmark link from that email in a DynamoDB table, from which I should be able to create a new API and page that will list anything I find interesting on my site.\n\nObviously there will be a few steps for this in order to get started and we are going to have to work out stuff for security, but it should be a lot of fun.\n\nLet’s get started with creating our own personal email inbox on SES, which is the first step required in the chain of this personal project.\n\n## Creating your AWS SES domain\n\nFirst up, you’ll need to create a new domain on AWS SES if you don’t already have this, which you can do from the SES homepage.\n\nhttps://eu-west-1.console.aws.amazon.com/ses/home\n\nI did this for my website domain, which previously didn’t have an SES service setup for it.\n\nThis is super simple if your domain is on Route 53 as AWS will update your records automatically, if it isn’t then you’ll need to update your DNS records accordingly.\n\nYou’ll want to make sure that you also generate a record for incoming emails or this won’t work.\n\n![SES Email Verification](https://cdn.nicholasgriffin.dev/serverless-email-inbox/ses-verify-domain.png)\n\nIf you want to be able to send emails from SES, you’ll also want to move your account out of “sandbox” mode, which can be done from the “Sending Statistics” page.\n\n\n## Creating a rule set\n\nFrom the same SES page on AWS, under the Email Receiving section you should see a link for rule sets. Click on this link to navigate to the page for creating a rule set.\n\nFrom here, you just need to follow the prompts to get started with a rule set.\n\nFirst enter the domain that you want to receive emails from (must be one that has been verified), and then select the bucket that you want to store the emails you receive in and enter a prefix if you’d like to store the emails in a folder, which I’d advice.\n\nMake a note of all these settings as they’ll be needed for the lambda.\n\n## Creating an inbox Lambda\n\nBecause rule sets don’t really allow you to specify specific buckets for categories of processing we are going to have to do this on our lambda individually.\n\nMy plan is to do this on a specific lambda that will process the received message, categorise it and then create a JSON object of the parsed email in a new folder within our email bucket.\n\nWe can then have additional lambdas for each of the additional tasks that we want to perform.\n\nYou can find my categorisation Lambda here: https://github.com/nicholasgriffintn/Serverless-Email-Inbox\n\nThis function takes an event from SES (which will be sent to it later) and then processes that event to store the email in the right place, this is done with the following two variables:\n\n```javascript\nconst mail = event.Records[0].ses.mail;\nconst receipt = event.Records[0].ses.receipt;\n```\n\nThe mail object contains all of the email information and receipt is just some metadata that SES sends for us based on their processing.\n\nThe main reason we grab the receipt is for the spam detection information, which we need to check to make sure the email hasn’t failed before we go any further, this is done like so:\n\n```javascript\n      const verdicts = [\n        'spamVerdict',\n        'virusVerdict',\n        'spfVerdict',\n        'dkimVerdict',\n        'dmarcVerdict',\n      ];\n\n      for (let key of verdicts) {\n        const verdict = receipt[key];\n\n        if (verdict && verdict.status === 'FAIL') {\n          throw new Error(\n            `rejected by spam filter; ${key} = ${verdict.status}`\n          );\n        }\n      }\n```\n\nIf any of those fail an error will be thrown and the rest won’t proceed, if it passes, we move onto the next step, which is to parse the email.\n\nTo do this, we grab the messageId from the mail object and then fetch the stored email from our S3 bucket, like so:\n\n```javascript\n      const { messageId } = mail;\n\n      console.info(\n        `Fetching email at s3://${config.bucket}/${config.keyPrefix}${messageId}`\n      );\n\n      const data = await s3\n        .getObject({\n          Bucket: config.bucket,\n          Key: `${config.keyPrefix}${messageId}`,\n        })\n        .promise();\n```\n\nWe then send the output to a handy function called simpleParser from the mail parser package with Inconv character encoding conversion:\n\n```javascript\nconst parsed = await simpleParser(data.Body, { Iconv });\n````\n\nYou can find out more about mail parser here: https://www.npmjs.com/package/mailparser and Iconv here (I’m using the lite version): https://www.npmjs.com/package/iconv-lite\n\nWith mailparser, we get a JSON output of the email with some handy stuff like the from, to, attachments, subject, html and more.\n\nFor this package, I’m creating a new object called processed, which I will then store within our category folder like so:\n\n```javascript\n        const processed = {};\n\n        processed.id = messageId;\n        processed.recieved = date;\n        processed.to = to;\n        processed.from = from;\n        processed.subject = subject;\n        processed.headers = headerLines;\n        processed.attachments = attachments;\n        processed.html = html;\n        processed.subject = subject;\n\n        const categoryFound = config.emailToCategories.find(\n          (category) => category.email === to.value[0].address\n        );\n\n        let processedBucket = config.defaultCategory.bucket;\n        let processedKeyPrefix = `${config.defaultCategory.keyPrefix}/${messageId}.json`;\n        let response = `${config.defaultCategory.category} message processed into bucket: ${config.defaultCategory.bucket} with the key: ${config.defaultCategory.keyPrefix}${messageId}`;\n\n        if (categoryFound) {\n          processedBucket = categoryFound.bucket;\n          processedKeyPrefix = `${categoryFound.keyPrefix}/${messageId}.json`;\n          response = `${categoryFound.category} message processed into bucket: ${categoryFound.bucket} with the key: ${categoryFound.keyPrefix}${messageId}`;\n        }\n```\n\nWe store the new processed JSON in the correct folder depending on the category (which is determined by which email address the message was sent to) and then delete the original email file from the bucket:\n\n```javascript\n        const processedData = await s3\n          .putObject({\n            Bucket: processedBucket,\n            Key: processedKeyPrefix,\n            Body: JSON.stringify(processed),\n            ContentType: 'application/json',\n          })\n          .promise();\n\n        if (processedData) {\n          console.info('Deleting the original email...');\n\n          await s3\n            .deleteObject({\n              Bucket: config.bucket,\n              Key: `${config.keyPrefix}${messageId}`,\n            })\n            .promise();\n\n          console.info(response);\n\n          return {\n            statusCode: 200,\n            body: JSON.stringify({\n              message: response,\n              event,\n            }),\n          };\n        } else {\n          throw new Error('File could not be processed.');\n        }\n```\n\nAnd that’s it! Now we have a fully fledged email inbox processing service that will receive emails to our domain, categorise them and then store the contents in a folder of our S3 bucket.\n\nNext up is to create a service that will look at our new bookmarks service and then correctly process that information for use with our upcoming bookmarks page.\n\nBe sure to bookmark this page if you want to follow the process 😉.\n\nFor now, it’s time for a cuppa!\n\n![Everyone drinks tea!](https://media.giphy.com/media/gKIWB7jME05Mjvw7Sj/giphy-downsized-large.gif?cid=ecf05e47ow0eznmkd0tkztb96g26skr7c4l0zrjpjmu0ydzn&rid=giphy-downsized-large.gif&ct=g)",
    "createdAt": "2021-08-29T19:03:55Z",
    "createdAt#updatedAt": "2021-08-29T19:03:55Z#2021-08-29T19:03:55Z",
    "ctime": "",
    "description": "I'm creating an AWS Lambda service that will recieve and process emails",
    "header": "https://cdn.nicholasgriffin.dev/serverless-email-inbox/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"email, AWS Lambda, AWS, AWS SES, serverless\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/serverless-email-inbox/thumbnail.png",
    "title": "Running a personal email inbox on SES",
    "updatedAt": "2021-08-29T19:04:58.255Z"
  },
  {
    "id": "b358b1a4-2537-4d04-9326-b67a4ed9dccb",
    "content": "\nIn the last blog post we talked about [adding a blog to our personal site via Node, Express and Mongo](../../../../../../../../post-single?postID=5c7be6e2a1e5fbe51cd94950). In this blog post, we will be expanding upon that by adding authentication to our new Express APIs via something called Passport.js.\n\nWe will be going through the backend side of the code only during this post, creating a set of APIs for creating users, generating tokens for users, logging users in and requiring authentication for our APIs.\n\nLet's get started.\n\n## Setting up our app\n\nFor this post, I am going to expect that you have already set up a node environment, and have Mongo set up and ready to go. If you still need to do that, then it might be best to find a tutorial on how to do that before you follow this.\n\nTo start, you'll need to make sure that you have the following packages installed and included within your main application file:\n\n```html\n<pre>const express = require('express');\nconst path = require('path');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\nconst cors = require('cors');\nconst mongoose = require('mongoose');\n</pre>\n```\n\nNow you will need to configure Mongose to use global promises and setup Express to use your modules and set up your sessions.\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #696969;\">//Configure mongoose's promise to global promise</span>\nmongoose<span style=\"color: #808030;\">.</span>promise <span style=\"color: #808030;\">=</span> <span style=\"color: #797997;\">global</span><span style=\"color: #808030;\">.</span>Promise<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">//Initiate our app</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> app <span style=\"color: #808030;\">=</span> express<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">//Configure our app</span>\napp<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span>cors<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\napp<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span>require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">morgan</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">dev</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\napp<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span>bodyParser<span style=\"color: #808030;\">.</span>urlencoded<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span> extended<span style=\"color: #800080;\">:</span> <span style=\"color: #0f4d75;\">false</span> <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\napp<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span>bodyParser<span style=\"color: #808030;\">.</span>json<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\napp<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span>express<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">static</span><span style=\"color: #808030;\">(</span>path<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">join</span><span style=\"color: #808030;\">(</span>__dirname<span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">public</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\napp<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span>session<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span> secret<span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">my-super-secret-key</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> cookie<span style=\"color: #800080;\">:</span> <span style=\"color: #800080;\">{</span> maxAge<span style=\"color: #800080;\">:</span> <span style=\"color: #008c00;\">60000</span> <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">,</span> resave<span style=\"color: #800080;\">:</span> <span style=\"color: #0f4d75;\">false</span><span style=\"color: #808030;\">,</span> saveUninitialized<span style=\"color: #800080;\">:</span> <span style=\"color: #0f4d75;\">false</span> <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nMake sure that you change your key to something really secret.\n\n## Storing user data\n\nNow that you have set up and configured your app, you will need to create your model for the Users database that you will need for the next steps.\n\nTo do this, you will need to create a new folder called \"models\" and then create a file within that folder called \"Users.js\".\n\nWe will be using this folder to define the schema for our users, hashing user passwords, generating a salt and creating the JWT that we will need latter. This file should look something like this:\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> mongoose <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">mongoose</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> crypto <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">crypto</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> jwt <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">jsonwebtoken</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800080;\">{</span> Schema <span style=\"color: #800080;\">}</span> <span style=\"color: #808030;\">=</span> mongoose<span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">const</span> UsersSchema <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">new</span> Schema<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span>\n  email<span style=\"color: #800080;\">:</span> <span style=\"color: #797997;\">String</span><span style=\"color: #808030;\">,</span>\n  hash<span style=\"color: #800080;\">:</span> <span style=\"color: #797997;\">String</span><span style=\"color: #808030;\">,</span>\n  salt<span style=\"color: #800080;\">:</span> <span style=\"color: #797997;\">String</span><span style=\"color: #808030;\">,</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\nUsersSchema<span style=\"color: #808030;\">.</span>methods<span style=\"color: #808030;\">.</span>setPassword <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">function</span><span style=\"color: #808030;\">(</span>password<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>salt <span style=\"color: #808030;\">=</span> crypto<span style=\"color: #808030;\">.</span>randomBytes<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">16</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">toString</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">hex</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>hash <span style=\"color: #808030;\">=</span> crypto<span style=\"color: #808030;\">.</span>pbkdf2Sync<span style=\"color: #808030;\">(</span>password<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>salt<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">10000</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">512</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">sha512</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">toString</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">hex</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\nUsersSchema<span style=\"color: #808030;\">.</span>methods<span style=\"color: #808030;\">.</span>validatePassword <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">function</span><span style=\"color: #808030;\">(</span>password<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> hash <span style=\"color: #808030;\">=</span> crypto<span style=\"color: #808030;\">.</span>pbkdf2Sync<span style=\"color: #808030;\">(</span>password<span style=\"color: #808030;\">,</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>salt<span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">10000</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">512</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">sha512</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">toString</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">hex</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>hash <span style=\"color: #808030;\">===</span> hash<span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\nUsersSchema<span style=\"color: #808030;\">.</span>methods<span style=\"color: #808030;\">.</span>generateJWT <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">function</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> today <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">new</span> <span style=\"color: #797997;\">Date</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> expirationDate <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">new</span> <span style=\"color: #797997;\">Date</span><span style=\"color: #808030;\">(</span>today<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  expirationDate<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">setDate</span><span style=\"color: #808030;\">(</span>today<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">getDate</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">+</span> <span style=\"color: #008c00;\">60</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">return</span> jwt<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">sign</span><span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span>\n    email<span style=\"color: #800080;\">:</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>email<span style=\"color: #808030;\">,</span>\n    id<span style=\"color: #800080;\">:</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>_id<span style=\"color: #808030;\">,</span>\n    <span style=\"color: #800000; font-weight: bold;\">exp</span><span style=\"color: #800080;\">:</span> <span style=\"color: #800000; font-weight: bold;\">parseInt</span><span style=\"color: #808030;\">(</span>expirationDate<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">getTime</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">/</span> <span style=\"color: #008c00;\">1000</span><span style=\"color: #808030;\">,</span> <span style=\"color: #008c00;\">10</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span>\n  <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">secret</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span>\n\nUsersSchema<span style=\"color: #808030;\">.</span>methods<span style=\"color: #808030;\">.</span>toAuthJSON <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">function</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #800080;\">{</span>\n    _id<span style=\"color: #800080;\">:</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>_id<span style=\"color: #808030;\">,</span>\n    email<span style=\"color: #800080;\">:</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>email<span style=\"color: #808030;\">,</span>\n    token<span style=\"color: #800080;\">:</span> <span style=\"color: #800000; font-weight: bold;\">this</span><span style=\"color: #808030;\">.</span>generateJWT<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span>\n  <span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\nmongoose<span style=\"color: #808030;\">.</span>model<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">Users</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> UsersSchema<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nTo use this model, you will need to add the following to your application file under the line where you are settiing up Mongo.\n\n```html\n<pre>require('./models/Users');</pre>\n```\n\n## Setting up our Passport.js config\n\nNow that we have set up our users model, we are ready to get started with our configuration for Passport.js.\n\nTo do this and keep it tidy we will need to create a new folder called \"config\", which we will be using for the storage of our configuration files for this part and for future requirements.\n\nWithin this folder, we need to create a new file named \"passport.js\".\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> mongoose <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">mongoose</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> passport <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">passport</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> LocalStrategy <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">passport-local</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">const</span> Users <span style=\"color: #808030;\">=</span> mongoose<span style=\"color: #808030;\">.</span>model<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">Users</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\npassport<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span><span style=\"color: #800000; font-weight: bold;\">new</span> LocalStrategy<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span>\n  usernameField<span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">user[email]</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span>\n  passwordField<span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">user[password]</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span>email<span style=\"color: #808030;\">,</span> password<span style=\"color: #808030;\">,</span> done<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n  Users<span style=\"color: #808030;\">.</span>findOne<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span> email <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span>\n    <span style=\"color: #808030;\">.</span>then<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>user<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>user <span style=\"color: #808030;\">||</span> <span style=\"color: #808030;\">!</span>user<span style=\"color: #808030;\">.</span>validatePassword<span style=\"color: #808030;\">(</span>password<span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #800000; font-weight: bold;\">return</span> done<span style=\"color: #808030;\">(</span><span style=\"color: #0f4d75;\">null</span><span style=\"color: #808030;\">,</span> <span style=\"color: #0f4d75;\">false</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800080;\">{</span> errors<span style=\"color: #800080;\">:</span> <span style=\"color: #800080;\">{</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">email or password</span><span style=\"color: #800000;\">'</span><span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">is invalid</span><span style=\"color: #800000;\">'</span> <span style=\"color: #800080;\">}</span> <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n\n      <span style=\"color: #800000; font-weight: bold;\">return</span> done<span style=\"color: #808030;\">(</span><span style=\"color: #0f4d75;\">null</span><span style=\"color: #808030;\">,</span> user<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">catch</span><span style=\"color: #808030;\">(</span>done<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nThis will basically use our password validation function from users to direct the user to the correct output.\n\nTo link this all together, you will need to add the following line after your model set up:\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\">require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">./config/passport</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\n## Setting up our authentication route\n\nThe final step is to set up a route that can be used for authentication.\n\nTo do this, we will create a new folder named \"routes\" and then within that, we will create a file named \"auth.js\". This will contain a function for getting a token from the user's request headers.\n\nIt does this by looking for a header named authorization and then splitting everything in the value after the word 'Token', the part that is returned should be our JWT.\n\nIf a JWT cannnot be found it will return null, which we can use to display an error through the API later.\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> jwt <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">express-jwt</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #800000; font-weight: bold;\">const</span> getJWT <span style=\"color: #808030;\">=</span> <span style=\"color: #808030;\">(</span>req<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800080;\">{</span> headers<span style=\"color: #800080;\">:</span> <span style=\"color: #800080;\">{</span> authorization <span style=\"color: #800080;\">}</span> <span style=\"color: #800080;\">}</span> <span style=\"color: #808030;\">=</span> req<span style=\"color: #800080;\">;</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>authorization <span style=\"color: #808030;\">&&</span> authorization<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">split</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">0</span><span style=\"color: #808030;\">]</span> <span style=\"color: #808030;\">===</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">Token</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> authorization<span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">split</span><span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span> <span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">[</span><span style=\"color: #008c00;\">1</span><span style=\"color: #808030;\">]</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800080;\">}</span>\n  <span style=\"color: #800000; font-weight: bold;\">return</span> <span style=\"color: #0f4d75;\">null</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nWe then need to create our variable for both required and optional authenticatiion methods and then finally export that variable:\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> auth <span style=\"color: #808030;\">=</span> <span style=\"color: #800080;\">{</span>\n  required<span style=\"color: #800080;\">:</span> jwt<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span>\n    secret<span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">secret</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span>\n    userProperty<span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">payload</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span>\n    getToken<span style=\"color: #800080;\">:</span> getJWT<span style=\"color: #808030;\">,</span>\n  <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span>\n  optional<span style=\"color: #800080;\">:</span> jwt<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span>\n    secret<span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">secret</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span>\n    userProperty<span style=\"color: #800080;\">:</span> <span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">payload</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span>\n    getToken<span style=\"color: #800080;\">:</span> getJWT<span style=\"color: #808030;\">,</span>\n    credentialsRequired<span style=\"color: #800080;\">:</span> <span style=\"color: #0f4d75;\">false</span><span style=\"color: #808030;\">,</span>\n  <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">,</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #800080;\">;</span>\n\nmodule<span style=\"color: #808030;\">.</span>exports <span style=\"color: #808030;\">=</span> auth<span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nNow we need to link all of this to an API.\n\nTo do that, create a new file in your routes folder called \"index.js\" and add the following code to it:\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> express <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">express</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> router <span style=\"color: #808030;\">=</span> express<span style=\"color: #808030;\">.</span>Router<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\nrouter<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">/api</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">./api</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\nmodule<span style=\"color: #808030;\">.</span>exports <span style=\"color: #808030;\">=</span> router<span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nThis will basically set up a new route that will link requests with the api pathname to a folder called api within our routes folder.\n\nCreate that api folder within your routes folder and then create another \"index.js\" file within that folder with the following:\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> express <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">express</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> router <span style=\"color: #808030;\">=</span> express<span style=\"color: #808030;\">.</span>Router<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\nrouter<span style=\"color: #808030;\">.</span>use<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">/users</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">./users</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\nmodule<span style=\"color: #808030;\">.</span>exports <span style=\"color: #808030;\">=</span> router<span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nAnd then, as you might have guessed from the code, we will need to create another file within the api folder called \"users.js\".\n\nThis is . where you will host your users APIs.\n\n## Creating your Users APIs\n\nTo start off, add the following to the top of your new file:\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> mongoose <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">mongoose</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> passport <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">passport</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> router <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">express</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>Router<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> auth <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">../auth</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> Users <span style=\"color: #808030;\">=</span> mongoose<span style=\"color: #808030;\">.</span>model<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">Users</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\nYou'll then need to add the following after that to register your APIs.\n\n**New user API**\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\">router<span style=\"color: #808030;\">.</span>post<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">/</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> auth<span style=\"color: #808030;\">.</span>optional<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span>req<span style=\"color: #808030;\">,</span> res<span style=\"color: #808030;\">,</span> next<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800080;\">{</span> body<span style=\"color: #800080;\">:</span> <span style=\"color: #800080;\">{</span> user <span style=\"color: #800080;\">}</span> <span style=\"color: #800080;\">}</span> <span style=\"color: #808030;\">=</span> req<span style=\"color: #800080;\">;</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>user<span style=\"color: #808030;\">.</span>email<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> res<span style=\"color: #808030;\">.</span>status<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">422</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>send<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Something unexpected happened</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800080;\">}</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>user<span style=\"color: #808030;\">.</span>password<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> res<span style=\"color: #808030;\">.</span>status<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">422</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>send<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Something unexpected happened</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800080;\">}</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">const</span> returnedUser <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">new</span> Users<span style=\"color: #808030;\">(</span>user<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n  returnedUser<span style=\"color: #808030;\">.</span>setPassword<span style=\"color: #808030;\">(</span>user<span style=\"color: #808030;\">.</span>password<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">return</span> returnedUser<span style=\"color: #808030;\">.</span>save<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span>\n    <span style=\"color: #808030;\">.</span>then<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> res<span style=\"color: #808030;\">.</span>json<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span> user<span style=\"color: #800080;\">:</span> returnedUser<span style=\"color: #808030;\">.</span>toAuthJSON<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\n**Login API**\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\">router<span style=\"color: #808030;\">.</span>post<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">/login</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> auth<span style=\"color: #808030;\">.</span>optional<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span>req<span style=\"color: #808030;\">,</span> res<span style=\"color: #808030;\">,</span> next<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800080;\">{</span> body<span style=\"color: #800080;\">:</span> <span style=\"color: #800080;\">{</span> user <span style=\"color: #800080;\">}</span> <span style=\"color: #800080;\">}</span> <span style=\"color: #808030;\">=</span> req<span style=\"color: #800080;\">;</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>user<span style=\"color: #808030;\">.</span>email<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> res<span style=\"color: #808030;\">.</span>status<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">422</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800080;\">}</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>user<span style=\"color: #808030;\">.</span>password<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">return</span> res<span style=\"color: #808030;\">.</span>status<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">422</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800080;\">}</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">return</span> passport<span style=\"color: #808030;\">.</span>authenticate<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">local</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> <span style=\"color: #800080;\">{</span> session<span style=\"color: #800080;\">:</span> <span style=\"color: #0f4d75;\">false</span> <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span>err<span style=\"color: #808030;\">,</span> passportUser<span style=\"color: #808030;\">,</span> info<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>err<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #800000; font-weight: bold;\">return</span> next<span style=\"color: #808030;\">(</span>err<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">if</span><span style=\"color: #808030;\">(</span>passportUser<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #800000; font-weight: bold;\">const</span> user <span style=\"color: #808030;\">=</span> passportUser<span style=\"color: #800080;\">;</span>\n      user<span style=\"color: #808030;\">.</span>token <span style=\"color: #808030;\">=</span> passportUser<span style=\"color: #808030;\">.</span>generateJWT<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n      <span style=\"color: #800000; font-weight: bold;\">return</span> res<span style=\"color: #808030;\">.</span>json<span style=\"color: #808030;\">(</span><span style=\"color: #800080;\">{</span> user<span style=\"color: #800080;\">:</span> user<span style=\"color: #808030;\">.</span>toAuthJSON<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span>\n\n    <span style=\"color: #800000; font-weight: bold;\">return</span> status<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">400</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>info<span style=\"color: #800080;\">;</span>\n  <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">(</span>req<span style=\"color: #808030;\">,</span> res<span style=\"color: #808030;\">,</span> next<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\n## Adding authentication to our APIs\n\nNow you are ready to add authentication to your APIs! Here's an example with the addpost API that I talked about in the last post about creating a blog within Mongo:\n\n```html\n<pre style=\"color: #000000; background: #ffffff;\"><span style=\"color: #800000; font-weight: bold;\">const</span> mongoose <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">mongoose</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> passport <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">passport</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> router <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">express</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>Router<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> auth <span style=\"color: #808030;\">=</span> require<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">../auth</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> Users <span style=\"color: #808030;\">=</span> mongoose<span style=\"color: #808030;\">.</span>model<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">Users</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800000; font-weight: bold;\">const</span> Post <span style=\"color: #808030;\">=</span> mongoose<span style=\"color: #808030;\">.</span>model<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">Post</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n\n<span style=\"color: #696969;\">// For creating posts</span>\nrouter<span style=\"color: #808030;\">.</span>post<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">'</span><span style=\"color: #0000e6;\">/addpost</span><span style=\"color: #800000;\">'</span><span style=\"color: #808030;\">,</span> auth<span style=\"color: #808030;\">.</span>required<span style=\"color: #808030;\">,</span> <span style=\"color: #808030;\">(</span>req<span style=\"color: #808030;\">,</span> res<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n  <span style=\"color: #800000; font-weight: bold;\">const</span> <span style=\"color: #800080;\">{</span> payload<span style=\"color: #800080;\">:</span> <span style=\"color: #800080;\">{</span> id <span style=\"color: #800080;\">}</span> <span style=\"color: #800080;\">}</span> <span style=\"color: #808030;\">=</span> req<span style=\"color: #800080;\">;</span>\n\n  <span style=\"color: #800000; font-weight: bold;\">return</span> Users<span style=\"color: #808030;\">.</span>findById<span style=\"color: #808030;\">(</span>id<span style=\"color: #808030;\">)</span>\n    <span style=\"color: #808030;\">.</span>then<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">(</span>user<span style=\"color: #808030;\">)</span> <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n      <span style=\"color: #800000; font-weight: bold;\">if</span> <span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">!</span>user<span style=\"color: #808030;\">)</span> <span style=\"color: #800080;\">{</span>\n        <span style=\"color: #800000; font-weight: bold;\">return</span> res<span style=\"color: #808030;\">.</span>sendStatus<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">400</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span>\n\n      <span style=\"color: #800000; font-weight: bold;\">var</span> postData <span style=\"color: #808030;\">=</span> <span style=\"color: #800000; font-weight: bold;\">new</span> Post<span style=\"color: #808030;\">(</span>req<span style=\"color: #808030;\">.</span>body<span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      postData<span style=\"color: #808030;\">.</span>save<span style=\"color: #808030;\">(</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>then<span style=\"color: #808030;\">(</span>result <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n        res<span style=\"color: #808030;\">.</span>status<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">200</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>send<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Post saved.</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span><span style=\"color: #800000; font-weight: bold;\">catch</span><span style=\"color: #808030;\">(</span>err <span style=\"color: #808030;\">=</span><span style=\"color: #808030;\">></span> <span style=\"color: #800080;\">{</span>\n        res<span style=\"color: #808030;\">.</span>status<span style=\"color: #808030;\">(</span><span style=\"color: #008c00;\">400</span><span style=\"color: #808030;\">)</span><span style=\"color: #808030;\">.</span>send<span style=\"color: #808030;\">(</span><span style=\"color: #800000;\">\"</span><span style=\"color: #0000e6;\">Unable to save data</span><span style=\"color: #800000;\">\"</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n      <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n    <span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n<span style=\"color: #800080;\">}</span><span style=\"color: #808030;\">)</span><span style=\"color: #800080;\">;</span>\n</pre>\n```\n\n## And that's it!\n\nYou have now successfully added authentication to your Node Express setup. Next up is creating a full frontend system with a login and dashboard page for our blog\n\n![](https://media.giphy.com/media/bWS1Vh9mVkcZq/giphy.gif)",
    "createdAt": "2019-04-19T14:48:27+0000",
    "createdAt#updatedAt": "2019-04-19T14:48:27+0000#2019-04-19T14:48:27+0000",
    "ctime": "2019-04-19",
    "description": "Time to make things secure",
    "header": "https://nicholasgriffin.dev/uploads/bp/2019/March/users_js.jpg",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"javascript,Node, Express, Passport.js,authentication\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/passport-thumbnail.png",
    "title": "Adding authentication to our Express blog with Passport.js",
    "updatedAt": "2019-04-19T14:48:27+0000"
  },
  {
    "id": "f2445d96-fb7b-45c4-b8b4-c466b8244d20",
    "__typename": "Post",
    "_lastChangedAt": 1630328235030,
    "_version": 5,
    "content": "If you have followed my site for some time then you would know that I've been creating a new version of my site pretty much every year, we've gone all the way from a simple WordPress server up to what I have live today, a NextJS server with all of the modern tools and services linked.\n\n## So what's happening in 2021?\n\nThis year, I have decided to build on what I created back in 2020 for my personal website https://github.com/nicholasgriffintn/NGWebsite2020 but this time, I've cut the servers and instead I've gone all out with serverless technology and [AWS Amplify](https://aws.amazon.com/amplify/).\n\nAWS Amplify is a pretty awesome tool from AWS that makes starting out super simple, it includes a number of commands that allow for the generation of APIs, storage and more super easy.\n\nAlongside that, you can also use it to add on extra stuff like authentication and what AWS calls DataStore.\n\n## The new stuff\n\nYou can find all of the new code for my personal site here: https://github.com/nicholasgriffintn/NGWebsite2021\n\nThis new site is using NextJS like before, but I have replaced Postgres and a Linux server with AWS' DynamoDB, Lambda service, API Gateway and AppSync, which is all managed, created and updated using the tools from AWS Amplify as explained before, with full CI/CD when linked to the Github repo.\n\nAlongside that, I've added authentication to the site.\n\nBy default, the site runs in an unauthenticated mode, but there is also the option of adding a login for any tools that I might add in the future such as a page to create posts or even the ability to create comments (there's a preview of that coming below at some point soon).\n\nOf course, that's not all, I've also used this as a great time to update all of the site's code and clean up some of the stuff that got left behind last year.\n\nSadly, with the change, I have had to remove a few bits, bit I'm going to be working on adding more of these soon.\n\n## The todo list\n\n- [x] Finish feed\n- [x] Finish sitemap\n- [x] Finish robots\n- [x] Finish posts page in terms of showing data\n- [x] Finish contact form\n- [x] Publish to Amplify\n- [x] Work out Amplify GraphQL sorting.\n- [x] Move homepage sections to components\n- [x] Finish homepage\n- [x] Move widgets in the sections to a new widgets folder\n- [x] Swap to nextjs/mdx? component rendering https://nextjs.org/blog/markdown\n- [x] Create post about new site\n- [x] Add a Gists page\n- [x] Finish blog page and posts list (make a component for the list)\n- [x] Add setup page\n- [x] Add projects (Github) page with full list\n- [x] Add a header with links to pages: blog, projects, contact, my desk (setup)\n- [x] Dark mode\n- [ ] Maybe look into if it's possible to add Apple Music widget vs the current Spotify one.\n- [ ] Use context for passing around functions and state\n- [x] Add Next/Image everywhere I can xD\n- [ ] AVIF?\n- [ ] Create my own service for form submissions\n- [ ] Add ability to record a voice message on contact form\n- [ ] Add the ability to send a WhatsApp or Text might be cool?\n- [x] Add the image resizing back\n- [x] Add login page and two-factor pages\n\n## Let's get started\n\n![Ready?](https://media1.giphy.com/media/0DYipdNqJ5n4GYATKL/giphy.gif?cid=ecf05e47cubbwzmj07vhlg3axrtbc4vuip43ffwg5lhgo90d&rid=giphy.gif&ct=g)",
    "createdAt": "2021-08-21T20:33:58Z",
    "createdAt#updatedAt": "2021-08-21T20:33:58Z#2021-08-21T20:33:58Z",
    "ctime": "",
    "description": "It's that time again!",
    "header": "https://cdn.nicholasgriffin.dev/images/posts/releasing-the-2021-version-of-my-personal-site/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"Meta\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/images/posts/releasing-the-2021-version-of-my-personal-site/thumbnail.png",
    "title": "Launching the 2021 version of my site",
    "updatedAt": "2021-08-30T12:57:15.013Z"
  },
  {
    "id": "999b680a-541c-41a4-a7dc-0ad6fb00f604",
    "content": "\nSo with the move to my new server, I had to create something that would allow me to create a set blog post like the one you are reading now. One of my aims for 2019 and onwards is to do more development and projects that don't really have any aim, simply to learn new stuff.\n\nTo kick that off, I needed some kind of platform that would allow me to submit posts to my site, over an authenticated user but without using any kind of third party, as I want my new site to depend on fewer third-parties and the whole aim of this project is to do more for myself.\n\nSo I got to work on a new platform that uses the Express basis that I previously created alongside Mongo for storing the posts and Passport.js for the JWT authentication on the APIs that I would be creating. For now the blog platform is all API based, however, I will be expanding this with a full login and dashboard system soon.\n\n## Let's get started\n\nBefore you can begin this for yourself, you will need to create a starter Node application with Express installed, there are numerous tutorials around the web for doing this and the platform changes regularly so it might be best to do some [Googling](https://www.google.com/search?q=node+express+starter \"Google Node Express Starter\") for that part.\n\nOnce you have a Node app ready, you will need to get a Mongo server setup and you will need to install the Mongoose package within your Node application.\n\nOn a mac, you can install a Mongo server with the following command:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"90bc\">brew install mongo  \nmkdir -p /data/db  \nsudo chown -R `id -un` /data/db</pre>\n```\n\nOnce complete, simply run mongod to startup your Mongo DB on localhost. For a server, you may want to look into something different. Personally, I quite like the [MongoDB Cloud service](https://www.mongodb.com/cloud) for development.\n\nAnd for the Mongoose install, run the following within your Node terminal (you may have to open a new window).\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"e0a2\">npm install mongoose --save</pre>\n```\n\nThen in your main app.js file add the following to start the mongodb server:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"4cfa\">var mongoose = require('mongoose')  \nmongoose.connect(\"mongodb://localhost:27017/my-blog\")</pre>\n```\n\nYou may need to change localhost to your domain if you are using something else, alongside the ending database name. I've set it as my-blog for now for this post.\n\n**Setting up body parser**\n\nWhile we are entering commands, it would be a good idea to install body parser from NPM. This module works great for parsing data that has been passed to your application, we will be using it to parse the data that is passed to the POST API that we will be setting up later.\n\nTo get started with body parser, run the following command in your Terminal window:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"b26d\">npm install body-parser</pre>\n```\n\nThen include the following within your main application file:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"ec95\">var bodyParser = require('body-parser')  \napp.use(bodyParser.json())  \napp.use(bodyParser.urlencoded({ extended: true}))</pre>\n```\n\n**Setting up the Mongo schema**\n\nWe are almost done but before we can start sending blog post data we will need to set up our Mongo database table and the schema that will be linked to that table.\n\nTo do that, you will need to add the following to your main application file:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"24c3\">var postSchema = new mongoose.Schema({ posttype: String, title: String, date: String, image: String, excerpt: String, body:  String });</pre>\n\n<pre class=\"graf graf--pre graf-after--pre\" id=\"9285\">var Post = mongoose.model('Post', postSchema);</pre>\n```\n\nI've added a few items to the schema here, but basically, you just need to set what your mongo will accept and the type that it should expect. You can [find out more about Mongoose schemas here](https://mongoosejs.com/docs/guide.html).\n\n**Setting up your API for adding new posts**\n\nFor this first part, we will be setting up a simplistic API for adding new posts, however, I am aiming to release another blog post soon with more about authenticating APIs with Passport.js. I didn't want to fill this one with too much just yet.\n\nAnyway, to set up your new API you will need to include the following within your application file:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"8df2\">app.post('/launchpost', (req, res) => {  \n    var postData = new Post(req.body);  \n    postData.save().then( result => {  \n        res.redirect('/');  \n    }).catch(err => {  \n        res.status(400).send(\"Unable to save data\");  \n    });  \n});</pre>\n```\n\nThis is a pretty simplistic listener that will link to any post request sent to the '/launchpost' path on your domain, you can change this to whatever you like as the name doesn't really matter.\n\nWhen someone sends a post request to this path it will grab the data from the body, save it in your configured Mongo table and then redirect the user to the homepage.\n\nIf you'd prefer to not have the redirect, you could change that line to the following:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"8df2\">res.status(200).send(\"Post saved.\");</pre>\n```\n\nIt will then simply send back a message that says 'Post saved', you could also expand this to send back the generated post ID.\n\nYou can query this API with Postman like this:\n\n![](/uploads/bp/2019/March/postman_addpost_2019.jpg)\n\n**Setting up your API for removing posts**\n\nSometimes you might want to remove a post that you have previously added so it might also make sense to create an API that will allow you to easily remove posts that you have previously published. You can do that with the following:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"8df2\">app.post('/removepost', (req, res) => {  \n    var postData = new Post({_id: req.body.id});  \n    postData.remove().then( result => {  \n        res.redirect('/');  \n    }).catch(err => {  \n        res.status(400).send(\"Unable to remove data\");  \n    });  \n});</pre>\n```\n\nAgain, feel free to change the name of the post or how it responds.\n\nAnd querying it in Postman will look like this:\n\n![](/uploads/bp/2019/March/postman_removepost_2019.jpg)\n\n**Displaying your blog post**\n\nNow that you have your APIs ready, you should probably set up a page to do this.\n\nPersonally, I quite like how the EJS templating engine works, so we will be using that to build the templates and then ultimately show the posts.\n\nYou can install EJS via your terminal window with the following command:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"e345\">npm install ejs --save</pre>\n```\n\nYou will then need to add the following to your application so that Express will use the engine:\n\n```html\n<pre class=\"graf graf--pre graf-after--p\" id=\"62ae\">app.engine('html', require('ejs').renderFile);  \napp.set('view engine', 'html');</pre>\n```\n\nBy default, EJS will look for template files in a directory named 'views' so you will need to create that and then add an index.html file within that directory.\n\nThere's a lot you can do with EJS in terms of templates, however, for this tutorial we are going to keep things simple, so within this html file we will simply be adding the code to display our posts, feel free to take at look at the EJS documentation to learn more about how to use it.\n\nBut before then, be sure to include the following code within your index.html file for the displaying of blog posts:\n\n```html\n<pre style=\"margin: 0; line-height: 125%\">    <% <span style=\"color: #0000aa\">if</span>(posts){ %>     <% <span style=\"color: #0000aa\">for</span>(let i = <span style=\"color: #009999\">0</span>; i < posts.length; i++) { %>     <div class=<span style=\"color: #aa5500\">\"card\"</span>>         <div class=<span style=\"color: #aa5500\">\"image\"</span>>         <img src=<span style=\"color: #aa5500\">\"<%= posts[i].image %>\"</span>>         </div>         <div class=<span style=\"color: #aa5500\">\"content\"</span>>         <a class=<span style=\"color: #aa5500\">\"header\"</span>><%= posts[i].title %></a>         <div class=<span style=\"color: #aa5500\">\"meta\"</span>>             <span class=<span style=\"color: #aa5500\">\"date\"</span>><%= posts[i].date %></span>         </div>         <div class=<span style=\"color: #aa5500\">\"description\"</span>>             <%= posts[i].excerpt %>         </div>         </div>         <div class=<span style=\"color: #aa5500\">\"extra content\"</span>>         <a class=<span style=\"color: #aa5500\">\"ui button primary basic inverted\"</span> href=<span style=\"color: #aa5500\">\"/post-single?postID=<%= posts[i]._id %>\"</span>>             Read more         </a>         </div>     </div>     <% } %> <% } %> </pre>\n```\n\nFinally, you'll need to add the route for your homepage like the following:\n\n```html\n<pre style=\"margin: 0; line-height: 125%\">app.get(<span style=\"color: #aa5500\">\"/\"</span>, (req, res) => {    Post.find({}, (err, posts) => {       res.render(<span style=\"color: #aa5500\">'index'</span>, { posts: posts})    }); }); </pre>\n```\n\nAnd for our single page route (you'll need create a page for this like the homepage):\n\n```html\n<pre style=\"margin: 0; line-height: 125%\">app.get(<span style=\"color: #aa5500\">\"/post-single\"</span>, (req, res) => {     Post.find({ <span style=\"color: #aa5500\">'_id'</span>: req.query.postID }, (err, posts) => {        res.render(<span style=\"color: #aa5500\">'post-single'</span>, { posts: posts})     }).sort({date: <span style=\"color: #aa5500\">'descending'</span>}); }); </pre>\n```\n\n## And now you are ready to go!\n\n![](https://media.giphy.com/media/s2qXK8wAvkHTO/giphy.gif)\n\nYou are ready to get blogging. Of course, you will probably want to authenticate this and you probably don't want to be adding post via Postman... Stay tuned for when I remember to talk about doing that...",
    "createdAt": "2019-04-02T14:48:27+0000",
    "createdAt#updatedAt": "2019-04-02T14:48:27+0000#2019-04-02T14:48:27+0000",
    "ctime": "2019-04-02",
    "description": "Let's get blogging!",
    "header": "https://nicholasgriffin.dev/uploads/bp/2019/March/postman_addpost_2019.jpg",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"javascript,Express,Node,Mongo\"}}",
    "thumbnail": "https://nicholasgriffin.dev/uploads/bp/2019/March/postman_addpost_2019.jpg",
    "title": "How I built a blog with Node, Express and Mongo",
    "updatedAt": "2019-04-02T14:48:27+0000"
  },
  {
    "id": "d3cd4531-bd04-4399-9cca-dcf077ac120e",
    "content": "\n**Two-factor authentication is actually really simple.**\n\nThat's not a sentence that you'll hear a lot in the industry, but all the same, it's one that is most definitely true.\n\nIf you are looking to secure the data in your application, there's no reason why you can't add two-factor authentication to your app in less than an hour. We're using NodeJS, but it's my firm belief that this is the same for pretty much any application out there.\n\nIf you've already got the hard work down in terms of securing your user data and passwords, it shouldn't be too much more to extend that to two-factor secrets.\n\n**Some pre-requisites**\n\nFor this post, we're going to be talking about implementing two-factor into a NodeJS application, and more specifically, with Express.\n\nWe are also going to be using the ORM Sequelize, I'm expecting that you already have these setup or already have alternatives. This is the same for our frontend with is React, NextJS.\n\n**Modules that we'll be using**\n\nIn order to make this even easier, we are going to be using a couple of packages, SpeakEasy and QRCode.React, you can install these in your application with npm or yarn, whichever you prefer, and then import them like so:\n\nFor SpeakEasy on Express:\n\n```javascript\nconst speakeasy = require(\"speakeasy\");\n```\n\nFor QRCode.React in React:\n\n```javascript\nimport QRCode from \"qrcode.react\";\n```\n\n**Generating a secret and storing it in Express**\n\nIn order for a user to validate a two-factor authentication code, they are going to need a secret generating against their user data within your system.\n\nFor this, we will create a quick Express API that validates the user, generates the secret, and responds with the secret itself and a URL safe secret like so:\n\n(I'm using Cognito and yes I know that has two-factor, I'm doing this for fun 😊 )\n\n```javascript\nserver.post(`/api/admin/two-factor`, async function (req, res) {\n    if (req.token) {\n      cognitoExpress.validate(req.token, async function (err, response) {\n        if (err || !response) {\n          res.status(403).json({ error: \"Token invalid\" });\n        } else {\n          // Our further code here\n       }\n   }\n})\n```\n\nFrom there, we need to add our generating code, which consists of three values, the first is the base secret, the second is the secret that we'll be storing in our db to validate against, and the third is the secret URL which we'll pass to the front-end for our QR code.\n\n```javascript\nconst genSecret = speakeasy.generateSecret();\n\nconst genSecretBase = genSecret.base32;\n\nconst genSecretURL = genSecret.otpauth_url;\n```\n\nThen we just need to store the token in the db and respond:\n\n```javascript\nawait models.user.update(\n  {\n    two_factor_secret: genSecretBase,\n  },\n  { where: { id: response.sub } }\n);\n\nres.status(200).json({ secret: genSecretBase, secretURL: genSecretURL });\n```\n\n**Adding the QR code generation screen**\n\nThe front-end for code generation is really simple, we're just going to have a button that generates the token and then displays the code for the user to scan.\n\nThis is all of the code for our React page:\n\n```javascript\nimport React from \"react\";\nimport checkLoggedIn from \"../lib/checkLoggedIn\";\nimport redirect from \"../lib/redirect\";\n\nimport Page from \"../components/Page\";\n\nimport QRCode from \"qrcode.react\";\n\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: \"\",\n      title: \"\",\n      description: \"\",\n      tags: \"\",\n      thumbnail: \"\",\n      header: \"\",\n      content: \"\",\n      qrcode_secret_url: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user, loggedIn } = checkLoggedIn();\n    if (!loggedIn) {\n      redirect({}, \"/login\");\n    } else if (user) {\n      this.setState({ user: user });\n    } else {\n      redirect({}, \"/login\");\n    }\n  }\n\n  generateTwoFactorCode() {\n    if (this.state.user && this.state.user.idToken.jwtToken) {\n      var grabTwoFactorSecretHeaders = new Headers();\n      grabTwoFactorSecretHeaders.append(\n        \"Authorization\",\n        \"Bearer \" + this.state.user.idToken.jwtToken\n      );\n      grabTwoFactorSecretHeaders.append(\"Content-Type\", \"application/json\");\n\n      var requestOptions = {\n        method: \"POST\",\n        headers: grabTwoFactorSecretHeaders,\n        redirect: \"follow\",\n      };\n\n      fetch(\"/api/admin/two-factor\", requestOptions)\n        .then((response) => response.text())\n        .then((result) => {\n          result = JSON.parse(result);\n          this.setState({ qrcode_secret_url: result.secretURL });\n        })\n        .catch((error) => console.error(\"error\", error));\n    }\n  }\n\n  render() {\n    return (\n      <Page displayHeader={true} title=\"Dashboard\">\n        <div className=\"content-wrap\">\n          <div className=\"container-main\">\n            <div className=\"page-header-spacer\"></div>\n\n            <h1>Setup Two Factor Authentication</h1>\n\n            {this.state.user && this.state.user.idToken ? (\n              <React.Fragment>\n                <button\n                  className=\"btn btn-primary\"\n                  onClick={() => this.generateTwoFactorCode()}\n                >\n                  Generate Code\n                </button>\n                {this.state.qrcode_secret_url && (\n                  <div className=\"qrcode-wrap\">\n                    <QRCode value={this.state.qrcode_secret_url} />\n                  </div>\n                )}\n              </React.Fragment>\n            ) : (\n              <p>Loading data</p>\n            )}\n          </div>\n        </div>\n      </Page>\n    );\n  }\n}\n```\n\nIt should look something like this:\n\n![Generate two-factor code](https://cdn.nicholasgriffin.dev/images/posts/adding-two-factor-authentication-to-a-node-application/generate.png)\n\n**Creating an API for verifying two-factor codes**\n\nNow that we have the secret generation API and front-end, we need another API for verifying a code that has been inputted by the user and activating a user for two-factor authentication, alongside some new front-end.\n\nIn the same way as the generate route, we will need a new route for the verification on Express, this time I'm calling it 'verify-two-factor'.\n\nWithin this API, we just need to grab the user's secret in the db and use it to verify the timed two-factor code that they've inputted against that token.\n\nSpeakeasy makes this really simple, the code is:\n\n```javascript\nconst userData = await models.user.findByPk(response.sub);\nif (userData) {\n  const userSecret = userData.two_factor_secret;\n\n  const userVerfied = speakeasy.totp.verify({\n    secret: userSecret,\n    encoding: \"base32\",\n    token: req.body.twofactor,\n  });\n\n  if (userVerfied) {\n    await models.user.update(\n      {\n        two_factor_enabled: true,\n      },\n      { where: { id: response.sub } }\n    );\n\n    res.status(200).json({ status: \"Verified\" });\n  } else {\n    res.status(500).json({ error: \"User not verified\", status: \"Unverified\" });\n  }\n} else {\n  res.status(500).json({ error: \"User not found\" });\n}\n```\n\nSuper simple right?\n\nYou can use this API to ensure that your user has inputted a two-factor code before allowing them access to any of their details, for this post, I've done a simple bit of code that calls the API on form submission.\n\n![Verify two-factor code](https://cdn.nicholasgriffin.dev/images/posts/adding-two-factor-authentication-to-a-node-application/verify.png)\n\n```javascript\nimport React from \"react\";\nimport checkLoggedIn from \"../lib/checkLoggedIn\";\nimport redirect from \"../lib/redirect\";\n\nimport Page from \"../components/Page\";\n\nexport default class Index extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      user: null,\n      twofactor: null,\n    };\n  }\n\n  componentDidMount() {\n    const { user, loggedIn } = checkLoggedIn();\n    if (!loggedIn) {\n      redirect({}, \"/login\");\n    } else if (user) {\n      this.setState({ user: user });\n    } else {\n      redirect({}, \"/login\");\n    }\n  }\n\n  handleTwoFactorChange(e) {\n    this.setState({ twofactor: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    var verifyTwoFactorHeaders = new Headers();\n    verifyTwoFactorHeaders.append(\n      \"Authorization\",\n      \"Bearer \" + this.state.user.idToken.jwtToken\n    );\n    verifyTwoFactorHeaders.append(\"Content-Type\", \"application/json\");\n\n    var raw = JSON.stringify({\n      twofactor: this.state.twofactor,\n    });\n\n    var requestOptions = {\n      method: \"POST\",\n      headers: verifyTwoFactorHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    fetch(\"/api/admin/verify-two-factor\", requestOptions)\n      .then((response) => response.text())\n      .then((result) => {\n        this.setState({ qrcode_secret_url: result.secretURL });\n      })\n      .catch((error) => console.error(\"error\", error));\n  }\n\n  render() {\n    return (\n      <Page displayHeader={true} title=\"Dashboard\">\n        <div className=\"content-wrap\">\n          <div className=\"container-main\">\n            <div className=\"page-header-spacer\"></div>\n\n            <h1>Verify Two Factor Authentication</h1>\n\n            {this.state.user && this.state.user.idToken ? (\n              <form onSubmit={this.handleSubmit.bind(this)}>\n                <div className=\"form-control\">\n                  <input\n                    type=\"twofactor\"\n                    value={this.state.twofactor}\n                    placeholder=\"Two Factor Code\"\n                    onChange={this.handleTwoFactorChange.bind(this)}\n                  />\n                </div>\n                <div className=\"form-control\">\n                  <input type=\"submit\" />\n                </div>\n              </form>\n            ) : (\n              <p>Loading data</p>\n            )}\n          </div>\n        </div>\n      </Page>\n    );\n  }\n}\n```\n\nAnd that really is it, the rest is up to you to integrate and play around with.\n\n![](https://media.giphy.com/media/3o7btNa0RUYa5E7iiQ/giphy.gif)\n",
    "createdAt": "2020-05-08T14:48:27+0000",
    "createdAt#updatedAt": "2020-05-08T14:48:27+0000#2020-05-08T14:48:27+0000",
    "ctime": "2020-05-08",
    "description": "Increase the security of your service in less than an hour",
    "header": "https://cdn.nicholasgriffin.dev/images/posts/adding-two-factor-authentication-to-a-node-application/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"NodeJS, security, two-factor, authentication, React\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/images/posts/adding-two-factor-authentication-to-a-node-application/thumbnail.png",
    "title": "Adding two-factor authentication to a NodeJS application",
    "updatedAt": "2020-05-08T14:48:27+0000"
  },
  {
    "id": "55b517b7-0862-4a8e-813e-31e883be1c36",
    "content": "If you've seen what I've done with my website over the last through years then you'll know that I've been through quite a few versions.\n\nBack when I was running my own technology blog in 2011, and the domain name was nicholasgriffin.co.uk, I wasn't really doing much with this site and couldn't really pay it the attention it required.\n\nOver the years, I've attempted to focus more on personal projects and in turn do more with this site, however, I've never really had the time to do everything that I've wanted to do.\n\n## So what is it that you're actually doing?\n\nAs part of my 2020 project, I've decided to work more on some features that are purely for myself.\n\nTo kick that off, I've started work on the new version of my site, for 2020.\n\nWith this new version, the main change is that I'll be going back to a server, despite recently moving the site to an [S3 static basis](https://nicholasgriffin.dev/post-single/simple-static-site-hosting-with-aws).\n\nFor 2020, the static will involve using a Ubuntu server with Nginx, Next JS, Postgres, and Express.\n\nThis will create a basis that I can do even more stuff from like a dashboard, authenticated APIs and integrations with AWS services are on the plan.\n\nMost of the design is probably going to stay the same most likely, although I may be adding a few things in overtime.\n\nBasically, the ideas to do pretty much anything that I want.\n\nI just hope that I don't create too many bugs.\n\nTime to get started.\n\n![Race](https://media.giphy.com/media/1KJPg114jm68U/giphy.gif)",
    "createdAt": "2020-04-16T14:48:27+0000",
    "createdAt#updatedAt": "2020-04-16T14:48:27+0000#2020-04-16T14:48:27+0000",
    "ctime": null,
    "description": "Bringing it back to a server",
    "header": "https://cdn.nicholasgriffin.dev/Screenshot+2020-04-18+at+23.40.18.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"Meta\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/ng-2020-website.png",
    "title": "Project NG 2020: Re-launching my personal website",
    "updatedAt": "2020-04-16T14:48:27+0000"
  },
  {
    "id": "5dd68d54-9dc4-4dc5-9c74-cae872971b17",
    "content": "This holiday weekend I decided that it would be a great idea to build my own bookmarks service.\n\nThis bookmarks service starts with the [Inbox Service](https://nicholasgriffin.dev/blog/cf3c4661-f676-4028-879b-f2686852b82b) would receive an email from SES, categorise that email and output JSON to a specific folder in a bucket.\n\nThen there’s [another service](https://nicholasgriffin.dev/blog/28d0d116-9f52-4ac2-bb64-d94f0da5c948) that gets triggered when that file has been saved and will process the data from the JSON and then store that processed data in DynamoDB.\n\nIn this article, I’m going to be building a new GraphQL API layer, this layer will provide us with a platform to retrieve and update the bookmarks.\n\nYou can find the full code for my Bookmarks Service here: https://github.com/nicholasgriffintn/Bookmarks-Service\n\n## Updating our Serverless definition\n\nThe first step in making our new GraphQL API is to update the Serverless definition that we made in part one to include our new GraphQL API.\n\nThis is done like so:\n\n```yaml\nfunctions:\n  process:\n    handler: processor.process\n    description: Process Bookmark emails to DynamoDB\n    timeout: 15\n    events:\n      - s3:\n          bucket: email.nicholasgriffin.dev\n          event: s3:ObjectCreated:*\n          rules:\n            - prefix: processed/bookmarks/\n            - suffix: .json\n          existing: true\n  graphql:\n    handler: api.graphql\n    description: GraphQL Service for interacting with the bookmarks data\n    timeout: 15\n    events:\n      - http:\n          path: graphql\n          method: post\n          cors: true\n      - http:\n          path: graphql\n          method: get\n          cors: true\n```\n\nIf you read the previous article, you may have also noticed that I have moved the processor and the API into their own files to keep things a little tidier.\n\nAside from what we did in part 1, that should be all you need to do here.\n\n## Setting up the API\n\nNext up, in our api file, we need to import a few packages that will help us along the way, these are:\n\n```javascript\nconst { ApolloServer, gql } = require('apollo-server-lambda');\nconst { unmarshall } = require('@aws-sdk/util-dynamodb');\nconst { DynamoDBClient, ScanCommand } = require('@aws-sdk/client-dynamodb');\n```\n\nWe also need to define our DynamoDB Client which will be used for grabbing the bookmarks data.\n\n```\nconst client = new DynamoDBClient({ region: config.region });\n```\n\nNow that’s done, let’s define our schema for GraphQL to use, at the moment, I’m defining everything as a string for the sake of time, but I’m going to need to change the bookmark to a proper object when I have the time.\n\nFor now, our schema is this:\n\n```javascript\nconst typeDefs = gql'\n  scalar JSON\n  type Bookmark {\n    id: String!\n    status: String\n    subject: String\n    recieved: String\n    bookmark: String\n    toName: String\n    toAddress: String\n    fromName: String\n    fromAddress: String\n  }\n  type Query {\n    bookmarks: [Bookmark]\n  }\n';\n```\n\nNext up are the resolvers, this is quite simple for now as we are only adding a retrieve function, we’ll want to update this with our mutations later.\n\n```javascript\nconst resolvers = {\n  Query: {\n    bookmarks: () => {\n      return getBookmarks();\n    }\n  }\n};\n```\n\nThe getBookmarks function that we are returning is this:\n\n```javascript\nconst getBookmarks = async () => {\n  const params = {\n    TableName: config.tableName,\n  };\n\n  try {\n    const results = await client.send(new ScanCommand(params));\n    const bookmarks = [];\n    results.Items.forEach((item) => {\n      const newRecord = unmarshall(item);\n\n      bookmarks.push(newRecord);\n    });\n    return bookmarks;\n  } catch (err) {\n    console.error(err);\n    return err;\n  }\n};\n```\n\nNow that’s done, we just need to create the server and export the handler that Serverless will be using:\n\n```\nconst gqlServer = new ApolloServer({\n  typeDefs,\n  resolvers,\n  introspection: false,\n});\n\nmodule.exports.graphql = gqlServer.createHandler({\n  cors: {\n    origin: true,\n    credentials: true,\n  },\n});\n```\n\nAnd that’s about it, we now have a GraphQL server that can output the data from our Bookmarks in DynamoDB!\n\nIn the next part, I’ll be expanding this service while I build a frontend for this service that will display all of the verified bookmarks and allow me to verify bookmarks that have not yet been verified from my Cognito login.\n\nSo stay tuned for that.\n\n![Stay Tuned!](https://media.giphy.com/media/9BzrkrC8KIuhtM1b0B/giphy-downsized-large.gif?cid=ecf05e4776fsjskfi92ubham0ney42r0wn56b1x0sgo3ik55&rid=giphy-downsized-large.gif&ct=g)",
    "createdAt": "2021-08-30T13:53:05Z",
    "createdAt#updatedAt": "2021-08-30T13:53:05Z#2021-08-30T13:53:05Z",
    "ctime": "",
    "description": "Creating a GraphQL service for retrieving our bookmarks",
    "header": "https://cdn.nicholasgriffin.dev/serverless-bookmarks-service-graphql/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"AWS, Lambda, Serverless, GraphQL\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/serverless-bookmarks-service-graphql/thumbnail.png",
    "title": "Building my own bookmarks service - Part 2",
    "updatedAt": "2021-08-30T14:17:15.735Z"
  },
  {
    "id": "2ef8778b-8369-4757-b2d5-066d8a22ba54",
    "content": "So far in Project NG 2020, I have published a number of posts about the launch of my new website for 2020, which is a NextJS website and blog that's backed by Express and Postgres.\n\nWe've adding authentication via AWS Cognito, launched a new website and blog with NextJS and got started with a few new APIs like my new image resizing API.\n\nToday, I'm going to talk about how I added my own posting dashboard for publishing and editing my content, without the need of using a third-party CMS, the main goal being to make sure that this site has no requirements on anything else.\n\nLet's get started.\n\n### Creating our Express API\n\nBefore we started, we're going to need to set up an Express API that will take care of the publishing and editing of the content, the code for this API is below.\n\n```javascript\nserver.post(`/api/admin/content`, limiter, async function (req, res) {\n  if (req.token) {\n    cognitoExpress.validate(req.token, async function (err, response) {\n      if (err || !response) {\n        res.status(403).json({ error: \"Token invalid\" });\n      } else {\n        req.apicacheGroup = \"content-api\";\n\n        try {\n          if (\n            req.body &&\n            req.body.slug &&\n            req.body.title &&\n            req.body.description &&\n            req.body.tags &&\n            req.body.thumbnail &&\n            req.body.header &&\n            req.body.content\n          ) {\n            const postData = await models.article.findByPk(req.body.slug);\n            if (postData) {\n              const record = await models.article.update(\n                {\n                  id: req.body.slug,\n                  title: req.body.title,\n                  published: req.body.published || false,\n                  description: req.body.description,\n                  tags: req.body.tags,\n                  thumbnail: req.body.thumbnail,\n                  header: req.body.header,\n                  content: req.body.content,\n                },\n                { where: { id: req.body.slug } }\n              );\n\n              await redis.del(`model:article:${req.body.slug}`);\n\n              res.status(200).json({ record });\n            } else {\n              const record = await models.article.create({\n                id: req.body.slug,\n                title: req.body.title,\n                published: req.body.published || false,\n                description: req.body.description,\n                tags: req.body.tags,\n                thumbnail: req.body.thumbnail,\n                header: req.body.header,\n                content: req.body.content,\n              });\n              res.status(200).json({ record });\n            }\n          } else {\n            res.status(500).json({ error: \"Incorrect params\" });\n          }\n        } catch (error) {\n          res.status(500).json({ error: error });\n        }\n      }\n    });\n  } else {\n    res.status(403).json({ error: \"Token invalid\" });\n  }\n});\n```\n\nIt might look like a lot of code, but it's quite simple.\n\nBasically, my blog has the following fields in the modal:\n\n- id\n- slug\n- title\n- description\n- tags\n- thumbnail\n- header\n- content\n\nWithin this API, we're simply checking for all of these fields and then storing the data in our articles modal.\n\nWe also have a check here to see if the slug already exists as a post in our DB, if it does we are going to update the record, if it doesn't we're creating it.\n\nWhen we're done, we will respond with the content.\n\nIn the future, I want to update this so that alongside the DB a markdown file is also stored on the server as a form of a backup.\n\n### Creating our dashboard page\n\nFor our dashboard page, I've decided to keep things simple with a React Component rather than a Functional Component.\n\n**Setting the state**\n\nTo start, on our page, we need to set up the state for all of the fields that we want to save as mentioned above.\n\n```javascript\nconstructor(props) {\n    super(props);\n    this.state = {\n      user: \"\",\n      title: \"\",\n      description: \"\",\n      tags: \"\",\n      thumbnail: \"\",\n      header: \"\",\n      content: \"\",\n      postData: {},\n      id: \"\",\n      isEditing: false,\n    };\n  }\n```\n\nNext up is a componentDidMount function that will check if the user is logged in an set the state for the user.\n\nWe also have a check here for the prop postData, which we will set further down the page as a prop.\n\nWe'll then use the data from that to set the state for all of the params as well as the isEditing state.\n\n```javascript\n  componentDidMount() {\n    const { user, loggedIn } = checkLoggedIn();\n    if (!loggedIn) {\n      redirect({}, \"/login\");\n    } else if (user) {\n      this.setState({ user: user });\n    } else {\n      redirect({}, \"/login\");\n    }\n\n    if (this.props.postData && this.props.postData.article) {\n      this.setState({\n        isEditing: true,\n        title: this.props.postData.article.title || \"\",\n        description: this.props.postData.article.description || \"\",\n        content: this.props.postData.article.content || \"\",\n        header: this.props.postData.article.header || \"\",\n        thumbnail: this.props.postData.article.thumbnail || \"\",\n        tags: this.props.postData.article.tags || \"\",\n        id: this.props.postData.article.id || \"\",\n      });\n    }\n  }\n```\n\nThis will allow us to publish content as well as update it.\n\nAs I'm using NextJS, I can set the props for the postData with a function called getInitialProps, like so:\n\n```javascript\nDashboard.getInitialProps = async (context) => {\n  let error = false;\n  let loading = true;\n  let postData = {};\n\n  if (context.query && context.query.article) {\n    console.log(context.query.article);\n\n    return fetch(config.websiteUrl + \"/api/graphql\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        operationName: \"GetArticle\",\n        variables: { id: context.query.article },\n        query: `query GetArticle {\n        article(id: \"${context.query.article}\") {\n          id\n          title\n          content\n          description\n          tags\n          thumbnail\n          header\n          createdAt\n          updatedAt\n        }\n      }`,\n      }),\n    })\n      .then((response) => {\n        return response.json();\n      })\n      .then((responseAsJson) => {\n        loading = false;\n\n        // Pass data to the page via props\n        return { postData: responseAsJson.data };\n      })\n      .catch((e) => {\n        console.error(\"error generating server side code\");\n        console.error(e);\n        return { postData: { message: \"No article id found\" } };\n      });\n  } else {\n    error = {\n      message: \"No article id found\",\n    };\n    loading = false;\n    return { postData: { message: \"No article id found\" } };\n  }\n};\n```\n\nThis is looking for the query parameter ?article=, it's then pinging my GraphQL for retrieving content from an ID, you could make this a REST request quite easily as well.\n\nOnce the content has been retrieved, the data is passed to the page via props.\n\nNow we're ready to get started with the html code, which I've on a similar level of simplicity.\n\nHere's the initial code:\n\n```javascript\n{\n  this.state.isEditing && this.props.postData && this.props.postData.article ? (\n    <h2>Edit the post: {this.props.postData.article.title}</h2>\n  ) : (\n    <h2>Create a post</h2>\n  );\n}\n\n<PostForm\n  isEditing={this.state.isEditing}\n  id={this.state.id}\n  title={this.state.title}\n  description={this.state.description}\n  tags={this.state.tags}\n  thumbnail={this.state.thumbnail}\n  header={this.state.header}\n  content={this.state.content}\n  onTitleChange={this._handleChangeTitle}\n  onDescriptionChange={this._handleChangeDescription}\n  onTagsChange={this._handleChangeTags}\n  onThumbnailChange={this._handleChangeThumbnail}\n  onHeaderChange={this._handleChangeHeader}\n  onContentChange={this._handleChangeContent}\n/>;\n```\n\nBasically, this just shows a different title depending on if you are editing a post or not, and then it loads the PostForm component, which is the actual form for the editing and publishing.\n\nWe pass a bunch of props from this page to the component, which is basically just the state data and the on change events, which basically pass the inputs value back and then sets the state.\n\nHere's the code for the PostForm component:\n\n```javascript\nimport React from \"react\";\n\nconst ReactMarkdown = require(\"react-markdown\");\n\nimport ReactMde from \"react-mde\";\nimport \"react-mde/lib/styles/css/react-mde-all.css\";\n\nexport default class PostForm extends React.Component {\n  render() {\n    return (\n      <div style={this.props.style}>\n        {this.props.id && (\n          <div className=\"form-control\">\n            <span>ID: {this.props.id}</span>\n          </div>\n        )}\n        <div className=\"form-control\">\n          <label className=\"form-control\">Title</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Title\"\n            onChange={this.props.onTitleChange}\n            value={this.props.title}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Description</label>\n          <textarea\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Description\"\n            onChange={this.props.onDescriptionChange}\n            value={this.props.description}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Tags</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Tags\"\n            onChange={this.props.onTagsChange}\n            value={this.props.tags}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Thumbnail</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Thumbnail\"\n            onChange={this.props.onThumbnailChange}\n            value={this.props.thumbnail}\n          />\n        </div>\n        <div className=\"form-control\">\n          <label className=\"form-control\">Header</label>\n          <input\n            autoComplete=\"off\"\n            style={{ marginBottom: 24 }}\n            placeholder=\"Post Header\"\n            onChange={this.props.onHeaderChange}\n            value={this.props.header}\n          />\n        </div>\n        <div className=\"form-control post-editor markdown-editor\">\n          <label className=\"form-control\">Post Content</label>\n          <ReactMde\n            value={this.props.content}\n            onChange={this.props.onContentChange}\n          />\n          <div id=\"post-content\" className=\"preview\">\n            <ReactMarkdown source={this.props.content} />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n```\n\nAs you can see at the bottom, I'm using markdown for my post content. At the bottom, there's a markdown editor, which I'm using a component called react-mde for. Next to that, I've added a preview of the post via the react-markdown plugin.\n\nThis makes it super easy to write content as markdowns really simple to edit with and it's great to see a preview as you write it, especially since it's using the final styles.\n\nWhen this form is submitted, the function that was passed in the props will run, which is:\n\n```javascript\n_handleSave = () => {\n  if (\n    this.state &&\n    this.state.user &&\n    this.state.user.idToken &&\n    this.state.user.idToken.jwtToken\n  ) {\n    if (\n      this.state.title &&\n      this.state.description &&\n      this.state.tags &&\n      this.state.thumbnail &&\n      this.state.header &&\n      this.state.content\n    ) {\n      var headers = new Headers();\n      headers.append(\n        \"Authorization\",\n        \"Bearer \" + this.state.user.idToken.jwtToken\n      );\n      headers.append(\"Content-Type\", \"application/json\");\n\n      var raw = JSON.stringify({\n        slug: this._slugify(this.state.title),\n        title: this.state.title,\n        published: true,\n        description: this.state.description,\n        tags: this.state.tags,\n        thumbnail: this.state.thumbnail,\n        header: this.state.header,\n        content: this.state.content,\n      });\n\n      var requestOptions = {\n        method: \"POST\",\n        headers: headers,\n        body: raw,\n        redirect: \"follow\",\n      };\n\n      fetch(\"/api/admin/content\", requestOptions)\n        .then((response) => response.text())\n        .then((result) => console.log(result))\n        .catch((error) => console.log(\"error\", error));\n    } else {\n      console.error(\"incorrect params\");\n    }\n  } else {\n    redirect({}, \"/login\");\n  }\n};\n```\n\nThis basically pushes the state function to the Express API that we defined at the start.\n\nYou can [find the full code for this and the rest of my site here](https://github.com/nicholasgriffintn/NGWebsite2020).\n\nWe're now ready to get started on creating tons of content for the rest of 2020.\n\n![](https://media.giphy.com/media/13GIgrGdslD9oQ/giphy.gif)",
    "createdAt": "2020-04-20T14:48:27+0000",
    "createdAt#updatedAt": "2020-04-20T14:48:27+0000#2020-04-20T14:48:27+0000",
    "ctime": null,
    "description": "It's time to expand Project NG 2020 with a new dashboard for publishing and editing content",
    "header": "https://cdn.nicholasgriffin.dev/images/posts/project-ng-2020-adding-a-dashboard-to-my-site/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"Express, Cognito, blog, NextJS, React\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/images/posts/project-ng-2020-adding-a-dashboard-to-my-site/thumbnail.png",
    "title": "Project NG 2020: Adding a dashboard to my site",
    "updatedAt": "2020-04-20T14:48:27+0000"
  },
  {
    "id": "c57a8c79-bac5-4bcd-96e3-1d6bb7fe5569",
    "content": "So while I've been in isolation I've been thinking about how I could use my time best to not only learn new things but also finally get some stuff going on this site. Despite updating it quite a lot, I've never really given enough attention to my personal projects or my website.\n\nI'm hoping that will end this week with the launch of what I'm calling \"Project NG 2020\".\n\nYeah I know that doesn't sound very imaginative or interesting, but the name definitely screams the goal.\n\nHere's the project plan checklist (I'll update this every time I complete something):\n\n- [x] Launch a new version of my personal site using next js, postgres, express and nginx\n\n   - The reason this is that some of my future plans will require a decent API server and database\n   - Project Github: https://github.com/nicholasgriffintn/NGWebsite2020\n\n- [x] Add authentication to my website using AWS Cognito\n\n- [x] Add a dashboard system to my website using the authentication for secured pages, with a blog posting system\n\n- [ ]  Image uploading API\n\n- [ ] S3 Media uploading and management dashboard\n\n- [x] Image resizing API for the client-side, allow the client to request things like width, height, focus etc.\n\n- [ ] Contact form API\n\n- [ ] Notifications microservice with newsletter capabilities and push notification capabilities\n\n- [ ] Extend this list with more ideas\n\n- [ ] Live blogging API?\n\nAs I complete these new blog posts will be released about my process and how the individual thing works, so be sure to keep up to date.\n\nFeel free to follow along or, even better, start your own 2020 project!\n\n![](https://media.giphy.com/media/rrLt0FcGrDeBq/giphy.gif)",
    "createdAt": "2020-06-18T14:48:27+0000",
    "createdAt#updatedAt": "2020-06-18T14:48:27+0000#2020-06-18T14:48:27+0000",
    "ctime": null,
    "description": "I know... It is very late for a 2020 project.",
    "header": "https://cdn.nicholasgriffin.dev/Screenshot+2020-04-18+at+22.05.57.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"Meta\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/ng-2020.png",
    "title": "Kicking off my personal 2020 project",
    "updatedAt": "2020-06-18T14:48:27+0000"
  },
  {
    "id": "5cf6e3dd-99e7-4037-a8d3-0c2b3eead439",
    "content": "**Update: I have changed this slightly, it's similar code but now it's a serverless Lambda service! Check out the source code here: https://github.com/nicholasgriffintn/images.nicholasgriffin.dev**\n\nWhenever you run a performance test against any application, you'll probably find issues with your images not being the right size.\n\nOne of the options for fixing this performance issue is to upload and load individual sizes for each of the image blocks on your application, however, I'm too lazy for that so we're building an Express API to make my life easier.\n\nTo start, we're going to do this in a really simple way that loads the images directly from the server.\n\nIt all starts with a component called resize.js:\n\nThis component requires two packages, fs and sharp.\n\nfs for loading the files and sharp for the actual resizing.\n\n```javascript\nconst fs = require(\"fs\");\nconst sharp = require(\"sharp\");\n\nmodule.exports = function resize(path, format, width, height) {\n  try {\n    if (fs.existsSync(path)) {\n      const readStream = fs.createReadStream(path);\n      let transform = sharp();\n\n      if (format) {\n        transform = transform.toFormat(format);\n      }\n\n      if (width || height) {\n        transform = transform.resize(width, height);\n      }\n\n      return readStream.pipe(transform);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\n```\n\nOn the Express API side of things, we need to import this component into our API file like so:\n\n```javascript\nconst resize = require(\"./resize\");\n```\n\nThen we can create our API route like so:\n\n```javascript\nserver.get(\"/api/images/resize\", (req, res) => {\n  // Extract the query-parameter\n  const widthString = req.query.width;\n  const heightString = req.query.height;\n  const format = req.query.format || \"png\";\n  const image = req.query.image\n    ? \"public/images/\" + req.query.image\n    : \"public/icon.png\";\n\n  // Parse to integer if possible\n  let width, height;\n  if (widthString) {\n    width = parseInt(widthString);\n  }\n  if (heightString) {\n    height = parseInt(heightString);\n  }\n  // Set the content-type of the response\n  res.type(`image/${format || \"png\"}`);\n\n  // Get the resized image\n  resize(image, format, width, height).pipe(res);\n});\n```\n\nThis just grabs the parameters from the URL query and then passes it to our resize function, from which the file will be grabbed by fs and then sharp will be run in order to format the image and resize it.\n\nYou'll notice that the image variable is adding the folder location to the image query parameter.\n\nWhen live we can request an image like this:\n\n`https://nicholasgriffin.dev/api/images/resize?image=posts/project-ng-2020-securing-my-website-with-aws-cognito/thumbnail.png&width=400&height=200`\n\nHere's an example of one with width 400 and height 200:\n\n![](https://nicholasgriffin.dev/api/images/resize?image=posts/project-ng-2020-securing-my-website-with-aws-cognito/thumbnail.png&width=400&height=200)\n\nAnd here's another that's been set to 80x80\n\n![](https://nicholasgriffin.dev/api/images/resize?image=posts/project-ng-2020-securing-my-website-with-aws-cognito/thumbnail.png&width=80&height=80)\n\nYes, it really is that simple and this could save you a ton of money that you would otherwise have to spend on a service like Imgix, granted without the crop and editing features for now, we'll get there.\n\nOf course, it's not good enough grabbing images from the server for something like this, we need our images to be served as fast as possible and we want to reduce the amount that we require server storage.\n\nSo obviously we need to change this to use AWS S3.\n\nFor that, our resize.js component needs to be changed to the following:\n\n```javascript\nconst fs = require(\"fs\");\nconst sharp = require(\"sharp\");\n\nconst AWS = require(\"aws-sdk\");\nAWS.config.loadFromPath(\"./aws-config.json\");\nconst S3 = new AWS.S3({\n  signatureVersion: \"v4\",\n});\n\nmodule.exports = function resize(path, format, width, height) {\n  try {\n    let quality = 80;\n\n    return S3.getObject({\n      Bucket: \"cdn.nicholasgriffin.dev\",\n      Key: path,\n    })\n      .promise()\n      .then((data) => {\n        if (data && data.Body) {\n          return sharp(data.Body)\n            .resize(width, height)\n            .toFormat(format, { quality: quality })\n            .toBuffer();\n        } else {\n          return {\n            statusCode: 500,\n            body: \"No image data was returned.\",\n          };\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        if (err.code === \"NoSuchKey\") err.message = \"Image not found.\";\n        return {\n          statusCode: err.statusCode,\n          body: err.message,\n        };\n      });\n  } catch (err) {\n    console.error(err);\n  }\n};\n```\n\nAs ylou can see this is very different, basically, what this does is grab the buffer data from s3 and then run that through sharp.\n\nBecause the output is different, we also need to change how the API responds, and so this our new API code:\n\n```javascript\nserver.get(\"/api/images/resize\", imageLimiter, async (req, res) => {\n  // Extract the query-parameter\n  const widthString = req.query.width;\n  const heightString = req.query.height;\n  const format = req.query.format || \"png\";\n  const image = req.query.image ? \"images/\" + req.query.image : \"icon.png\";\n\n  // Parse to integer if possible\n  let width, height;\n  if (widthString) {\n    width = parseInt(widthString);\n  }\n  if (heightString) {\n    height = parseInt(heightString);\n  }\n\n  // Get the resized image\n  const imageResized = await resize(image, format, width, height);\n\n  console.log(imageResized);\n\n  if (imageResized && !imageResized.statusCode) {\n    // Set the content-type of the response\n    res.type(`image/${format || \"png\"}`);\n\n    var imageResizedBase = Buffer.from(imageResized, \"base64\");\n\n    res.end(imageResizedBase);\n  } else {\n    // Set the content-type of the response\n    res.type(`application/json\"}`);\n\n    res.send(imageResizedBase);\n  }\n});\n```\n\nThis will now check for the existance of a status code to check if an image has been return, if it hasn't, we change the type and send the json response instead.\n\nAwesome right? Next up on my website for 2020 will be combining all of this and expanding our code for a full blog post and admin system, dashboard and all.\n\n![](https://media.giphy.com/media/dkGhBWE3SyzXW/giphy.gif)\n",
    "createdAt": "2020-06-18T14:48:27+0000",
    "createdAt#updatedAt": "2020-06-18T14:48:27+0000#2020-06-18T14:48:27+0000",
    "ctime": null,
    "description": "Optimizing my site with automatic image resizing",
    "header": "https://cdn.nicholasgriffin.dev/images/posts/project-ng-2020-building-an-express-image-resizing-api/header.png",
    "status": "PUBLISHED",
    "tags": "{\"name\":{\"S\":\"NodeJS, React, Image Resizing, Express\"}}",
    "thumbnail": "https://cdn.nicholasgriffin.dev/images/posts/project-ng-2020-building-an-express-image-resizing-api/thumbnail.png",
    "title": "Project NG 2020: Building an Express Image Resizing API",
    "updatedAt": "2020-06-18T14:48:27+0000"
  }
]